{"version":3,"file":"static/js/6547.33cd62e1.chunk.js","mappings":"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","sources":["App/globalFunctions.js","Components/FilialButtons/FilialButtons.js","Components/Inputs/TableInput.js","Components/RegularExpressions/RegularExpressions.js","Components/Avatar/ConnectionAvatar.js","Components/FilialConnectionCard/FilialConnectionCard.js","Pages/Connection/Connection.js"],"sourcesContent":["import {regexForEmptyString} from '../Components/RegularExpressions/RegularExpressions.js'\r\nimport {orderBy, reduce} from 'lodash'\r\nimport * as XLSX from 'xlsx'\r\n\r\nexport const universalSort = (data, setData, key, sort, prevData) => {\r\n    const keys = key.split('.')\r\n    const result = sort\r\n        ? orderBy(\r\n            [...data],\r\n            (item) => {\r\n                return keys.length === 3\r\n                    ? item[keys[0]][keys[1]][keys[2]]\r\n                    : keys.length === 2\r\n                        ? item[keys[0]][keys[1]]\r\n                        : item[key]\r\n            },\r\n            [sort === -1 ? 'desc' : 'asc']\r\n        )\r\n        : prevData\r\n    setData(result)\r\n}\r\nexport const UsdToUzs = (val, currency) => Math.round(val * currency)\r\n\r\nexport const UzsToUsd = (val, currency) =>\r\n    Math.round((val / currency) * 1000) / 1000\r\n\r\n// check empty string\r\nexport const checkEmptyString = (values) => {\r\n    let result = {failed: false, message: ''}\r\n    for (let i = 0; i < values.length; i++) {\r\n        if (regexForEmptyString.test(values[i].value)) {\r\n            result = {\r\n                message: values[i].message,\r\n                failed: true\r\n            }\r\n            break\r\n        }\r\n    }\r\n    return result\r\n}\r\n// export excel\r\nexport const exportExcel = (data, fileName, headers) => {\r\n    const autoFillColumnWidth = (json) => {\r\n        const cols = Object.keys(json[0])\r\n        return cols.map((key, index) => {\r\n            let maxLength = Math.max(\r\n                ...json.map((x) => x[key].toString().length)\r\n            )\r\n            return {\r\n                wch:\r\n                    headers[index].length > maxLength\r\n                        ? headers[index].length + 1\r\n                        : maxLength + 4\r\n            }\r\n        })\r\n    }\r\n    const wscols = autoFillColumnWidth(data)\r\n    const wb = XLSX.utils.book_new()\r\n    const ws = XLSX.utils.json_to_sheet([])\r\n    ws['!cols'] = wscols\r\n    XLSX.utils.sheet_add_aoa(ws, [headers])\r\n    XLSX.utils.sheet_add_json(ws, data, {\r\n        origin: 'A2',\r\n        skipHeader: true\r\n    })\r\n    XLSX.utils.book_append_sheet(wb, ws, 'Maxsulotlar')\r\n    XLSX.writeFile(wb, `${fileName}-${new Date().toLocaleDateString()}.xlsx`)\r\n}\r\n\r\n// round UZS||USD\r\nexport const roundUzs = (val) => Math.round(val * 1) / 1\r\n\r\nexport const roundUsd = (val) => Math.round(val * 1000) / 1000\r\n\r\n// reduce\r\nexport const reduceSumm = (arr, key) =>\r\n    reduce(arr, (prev, current) => prev + current[key], 0)\r\n\r\n// current Exchange\r\nexport const currentExchangerate = (uzs, usd) => roundUzs(uzs / usd)\r\n","import React from 'react'\r\nimport {IoCartOutline, IoCubeOutline, IoEnterOutline, IoNewspaperOutline} from 'react-icons/io5'\r\n\r\nfunction FilialButtons({type, onClick, active}) {\r\n    const propsType = {\r\n        product: {\r\n            icon: <IoNewspaperOutline className='shopIcons' />,\r\n            bgColor: 'bg-[#12B76A]'\r\n        },\r\n        selling: {\r\n            icon: <IoCartOutline className='shopIcons' />,\r\n            bgColor: 'bg-[#F79009]'\r\n        },\r\n        payments: {\r\n            icon: <IoCubeOutline className='shopIcons' />,\r\n            bgColor: 'bg-[#00B4CC]'\r\n        },\r\n        income: {\r\n            icon: <IoEnterOutline className='shopIcons' />,\r\n            bgColor: 'bg-[#00B4CC]'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button\r\n            onClick={onClick}\r\n            className={`${active ? 'filial-active' : propsType[type].bgColor} shopButton`}\r\n        >\r\n            {propsType[type].icon}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default FilialButtons\r\n","function TableInput({\r\n                        placeholder,\r\n                        type,\r\n                        value,\r\n                        onChange,\r\n                        label,\r\n                        disabled,\r\n                        onKeyUp\r\n                    }) {\r\n    return (\r\n        <div className={'w-full'}>\r\n            <label>\r\n                {label}\r\n                <input\r\n                    disabled={disabled}\r\n                    className='tableInput lg:h-[auto]  h-[30px]'\r\n                    placeholder={placeholder}\r\n                    type={type}\r\n                    value={value}\r\n                    onChange={onChange}\r\n                    onKeyUp={onKeyUp}\r\n                    onWheel={(e) => e.target.blur()}\r\n                    min={0}\r\n                    \r\n                />\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableInput\r\n","export const regexForTypeNumber = /^\\d*\\.?\\d*$/\r\nexport const regexForEmptyString = /^\\s*$/","import {useSelector} from 'react-redux'\r\n\r\nfunction ConnectionAvatar({border = false, navbarExpended, director = null}) {\r\n    const user = useSelector((state) => state.login.user)\r\n    const checkImageHas = (image) => {\r\n        return image.indexOf('http://') === 0 || image.indexOf('https://') === 0\r\n    }\r\n    return (\r\n        <>\r\n            {border && director ? (\r\n                <div className={'flex items-center gap-[1.25rem] p-[1.25rem]'}>\r\n                    <div className='avatar-border rounded-[50%] p-[0.625rem] overflow-hidden'>\r\n                        <div\r\n                            className={`avatar-image flex items-center justify-center w-[50px] h-[50px] rounded-full overflow-hidden`}\r\n                        >\r\n                            {director.image && checkImageHas(director.image) ? (\r\n                                <img\r\n                                    src={director.image}\r\n                                    alt={director.firstname}\r\n                                    className={'pointer-events-none'}\r\n                                />\r\n                            ) : (\r\n                                `${\r\n                                    director.firstname[0].toUpperCase() +\r\n                                    director.lastname[0].toUpperCase()\r\n                                }`\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <div className={`w-full flex items-center gap-[10px]`}>\r\n                    <div\r\n                        className={`avatar-image flex items-center justify-center transition-all ease-linear duration-300 w-[50px] h-[50px] rounded-full overflow-hidden shadow-[0_10px_10px_rgba(0,0,0,0.15)]`}\r\n                    >\r\n                        {user?.image && checkImageHas(user?.image) ? (\r\n                            <img\r\n                                src={user?.image}\r\n                                alt={user?.firstname}\r\n                                className={'pointer-events-none'}\r\n                            />\r\n                        ) : (\r\n                            `${user?.firstname[0].toUpperCase() + user?.lastname[0].toUpperCase()}`\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ConnectionAvatar\r\n","import React from 'react'\r\nimport FilialButtons from '../FilialButtons/FilialButtons'\r\nimport ConnectionAvatar from '../Avatar/ConnectionAvatar'\r\nimport {Link} from 'react-router-dom'\r\nimport { t } from 'i18next'\r\nconst FilialConnectionCard = ({active, market}) => {\r\n    return (\r\n        <section>\r\n            <div\r\n                className={`shops_card flex gap-[1.25rem] ${\r\n                    active ? 'active_shop' : ''\r\n                }`}\r\n            >\r\n                <ConnectionAvatar border={true} director={market?.director} />\r\n                <div className='product-cost'>\r\n                    <div\r\n                        className={'flex flex-col items-center justify-center'}\r\n                    >\r\n                        <p className='product'>{t('Do\\'kon')} INN</p>\r\n                        <p className='product-number'>{market?.name}</p>\r\n                    </div>\r\n                    <div\r\n                        className={'flex flex-col items-center justify-center'}\r\n                    >\r\n                        <p className='product'>{t('Direktor')}</p>\r\n                        <div className='flex gap-[5px]'>\r\n                            <p className='product-number'>\r\n                                {market?.director?.firstname}\r\n                            </p>\r\n                            <p className='product-number'>\r\n                                {market?.director?.lastname}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div\r\n                        className={'flex flex-col items-center justify-center'}\r\n                    >\r\n                        <p className='product'>{t('Telefon')}</p>\r\n                        <p className='product-number'>{market?.phone}</p>\r\n                    </div>\r\n                </div>\r\n                <div className='shop-name flex flex-col w-[13.4375rem]'>\r\n                    <div className='shop-title'>\r\n                        <p>INN: {market?.inn.toLocaleString('ru-RU')}</p>\r\n                    </div>\r\n                    <div className={'filial-btn'}>\r\n                        <Link\r\n                            to={`/dukonlar/hamkorlar/mahsulotlar/${market._id}`}\r\n                        >\r\n                            <FilialButtons type={'product'} />\r\n                        </Link>\r\n                        <Link\r\n                            to={`/dukonlar/hamkorlar/hamkormahsulotlari/${market._id}`}\r\n                        >\r\n                            <FilialButtons type={'selling'} />\r\n                        </Link>\r\n                        <Link to={'/dukonlar/hamkorlar/buyurtma'}>\r\n                            <FilialButtons type={'payments'} />\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default FilialConnectionCard\r\n","import React, {useEffect, useState} from 'react'\r\nimport FilialConnectionCard from '../../Components/FilialConnectionCard/FilialConnectionCard'\r\nimport FieldContainer from '../../Components/FieldContainer/FieldContainer.js'\r\nimport Button from '../../Components/Buttons/BtnAddRemove.js'\r\nimport {useTranslation} from 'react-i18next'\r\nimport UniversalModal from '../../Components/Modal/UniversalModal.js'\r\nimport {regexForTypeNumber} from '../../Components/RegularExpressions/RegularExpressions.js'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    answerToRequest,\r\n    clearMarketByInn,\r\n    createRequestToConnection,\r\n    deleteRequestToConnection,\r\n    getConnectionMarkets,\r\n    getMarketByInn,\r\n    getNewRequestsToConnection,\r\n    incomingRequestsToConnection,\r\n    sendingRequestsToConnection\r\n} from './connectionSlice.js'\r\nimport SearchForm from '../../Components/SearchForm/SearchForm.js'\r\nimport {filter, map, uniqueId} from 'lodash'\r\n\r\nfunction Connection() {\r\n    const {t} = useTranslation(['common'])\r\n    const dispatch = useDispatch()\r\n    const {\r\n        marketByInn,\r\n        connections,\r\n        sendingRequests,\r\n        incomingRequests,\r\n        countOfNewRequests,\r\n    } = useSelector((state) => state.connections)\r\n    const {market} = useSelector((state) => state.login)\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n    const [inn, setInn] = useState('')\r\n    const [modalBody, setModalBody] = useState('requestconnection')\r\n    const [connectionMarkets, setConnectionMarkets] = useState([])\r\n    const [allSendingRequests, setAllSendingRequests] = useState([])\r\n    const [allIncomingRequests, setAllIncomingRequests] = useState([])\r\n\r\n    const clearForm = () => {\r\n        setInn('')\r\n    }\r\n    const handleInn = (e) => {\r\n        let val = e.target.value\r\n        if (regexForTypeNumber.test(val)) {\r\n            setInn(val)\r\n        }\r\n    }\r\n    const handelCloseModal = () => {\r\n        setModalVisible(false)\r\n        clearMarketByInn()\r\n    }\r\n    const handleFindMarketByInn = (e) => {\r\n        e.preventDefault()\r\n        dispatch(getMarketByInn({inn})).then(({error}) => {\r\n            if (!error) {\r\n                setModalVisible(true)\r\n                setModalBody('requestconnection')\r\n            }\r\n        })\r\n    }\r\n    const handleCreateRequestToConnection = () => {\r\n        const body = {firstMarket: market._id, secondMarket: marketByInn._id}\r\n        dispatch(createRequestToConnection(body)).then(({error}) => {\r\n            if (!error) {\r\n                clearMarketByInn()\r\n                setModalVisible(false)\r\n                clearForm()\r\n                dispatch(sendingRequestsToConnection())\r\n            }\r\n        })\r\n    }\r\n    const handleDeleteRequest = (connectionId) => {\r\n        dispatch(deleteRequestToConnection({connectionId})).then(({error}) => {\r\n            if (!error) {\r\n                dispatch(sendingRequestsToConnection())\r\n                dispatch(incomingRequestsToConnection())\r\n            }\r\n        })\r\n    }\r\n    const handleAnswerRequest = (connection) => {\r\n        dispatch(answerToRequest({connection})).then(({error}) => {\r\n            if (!error) {\r\n                dispatch(incomingRequestsToConnection())\r\n                dispatch(getConnectionMarkets())\r\n                dispatch(getNewRequestsToConnection())\r\n            }\r\n        })\r\n    }\r\n    const handleAcceptRequest = (connection) => {\r\n        handleAnswerRequest({\r\n            ...connection,\r\n            accept: true,\r\n            rejected: false,\r\n            request: false,\r\n        })\r\n    }\r\n    const handleRejectRequest = (connection) => {\r\n        handleAnswerRequest({\r\n            ...connection,\r\n            accept: false,\r\n            rejected: true,\r\n            request: false,\r\n        })\r\n    }\r\n\r\n    const sendingRequest = (e) => {\r\n        e.preventDefault()\r\n        setModalVisible(true)\r\n        setModalBody('sendingApplication')\r\n    }\r\n    const requestApplication = (e) => {\r\n        e.preventDefault()\r\n        setModalVisible(true)\r\n        setModalBody('requestApplication')\r\n    }\r\n\r\n    // filters\r\n    const filterByMarketName = (e) => {\r\n        const val = e.target.value.toLowerCase()\r\n        const filtered = filter(connections, (market) =>\r\n            market.name.toLowerCase().includes(val)\r\n        )\r\n        setConnectionMarkets(filtered)\r\n    }\r\n    const filterByMarketInn = (e) => {\r\n        const val = e.target.value.toLowerCase()\r\n        const filtered = filter(connections, (market) =>\r\n            market.inn.toString().toLowerCase().includes(val)\r\n        )\r\n        setConnectionMarkets(filtered)\r\n    }\r\n\r\n    const filterByDirectorName = (e) => {\r\n        const val = e.target.value.toLowerCase()\r\n        const filtered = filter(\r\n            connections,\r\n            (market) =>\r\n                market.director.firstname.toLowerCase().includes(val) ||\r\n                market.director.lastname.toLowerCase().includes(val)\r\n        )\r\n        setConnectionMarkets(filtered)\r\n    }\r\n    // modal toggle\r\n    const toggleModal = () => setModalVisible(!modalVisible)\r\n    // useEffects\r\n    useEffect(() => {\r\n        dispatch(getConnectionMarkets())\r\n        dispatch(incomingRequestsToConnection())\r\n        dispatch(sendingRequestsToConnection())\r\n        dispatch(getNewRequestsToConnection())\r\n    }, [dispatch])\r\n    useEffect(() => {\r\n        setConnectionMarkets(connections)\r\n    }, [connections])\r\n    useEffect(() => {\r\n        setAllSendingRequests(sendingRequests)\r\n    }, [sendingRequests])\r\n    useEffect(() => {\r\n        setAllIncomingRequests(incomingRequests)\r\n    }, [incomingRequests])\r\n\r\n    return (\r\n        <div>\r\n            <UniversalModal\r\n                body={modalBody}\r\n                marketByInn={marketByInn}\r\n                toggleModal={toggleModal}\r\n                approveFunction={handleCreateRequestToConnection}\r\n                closeModal={handelCloseModal}\r\n                isOpen={modalVisible}\r\n                sendingRequests={allSendingRequests}\r\n                handleDeleteRequest={handleDeleteRequest}\r\n                incomingRequests={allIncomingRequests}\r\n                handleAcceptRequest={handleAcceptRequest}\r\n                handleRejectRequest={handleRejectRequest}\r\n            />\r\n\r\n            <form\r\n                className={`flex gap-[1.25rem] bg-background flex-col mainPadding transition ease-linear duration-200`}\r\n            >\r\n                <div className='supplier-style'>\r\n                    <FieldContainer\r\n                        value={inn}\r\n                        onChange={handleInn}\r\n                        label={t(\"Do'kon INN raqami\")}\r\n                        placeholder={`${t('misol')}: 123 456 789`}\r\n                        border={true}\r\n                    />\r\n                    <div className={'flex gap-[1.25rem] grow'}>\r\n                        <Button\r\n                            onClick={handleFindMarketByInn}\r\n                            add={true}\r\n                            text={t(\"Yangi do'kon qo'shish\")}\r\n                        />\r\n                        <Button\r\n                            edit={true}\r\n                            text={t('Yuborilganlar')}\r\n                            onClick={sendingRequest}\r\n                        />\r\n                        <Button\r\n                            count={countOfNewRequests.count}\r\n                            bell={true}\r\n                            text={t(\"So'rovlar\")}\r\n                            onClick={requestApplication}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n            <div className='mainPadding'>\r\n                <p className='supplier-title text-center'>\r\n                    {t(\"Hamkor do'konlar\")}\r\n                </p>\r\n            </div>\r\n            <SearchForm\r\n                filterBy={['marketName', 'inn', 'directorName', 'lastname']}\r\n                filterByMarketName={filterByMarketName}\r\n                filterByMarketInn={filterByMarketInn}\r\n                filterByDirectorName={filterByDirectorName}\r\n            />\r\n            <div className='mainPadding'>\r\n                {connectionMarkets &&\r\n                    map(connectionMarkets, (market) => (\r\n                        <div className='pb-4' key={uniqueId('markets')}>\r\n                            <FilialConnectionCard market={market} />\r\n                        </div>\r\n                    ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Connection\r\n"],"names":["universalSort","data","setData","key","sort","prevData","keys","split","orderBy","item","length","UsdToUzs","val","currency","Math","round","UzsToUsd","checkEmptyString","values","result","failed","message","i","regexForEmptyString","test","value","exportExcel","fileName","headers","wscols","json","Object","map","index","maxLength","max","x","toString","wch","wb","XLSX","book_new","ws","json_to_sheet","sheet_add_aoa","sheet_add_json","origin","skipHeader","book_append_sheet","Date","toLocaleDateString","roundUzs","roundUsd","reduceSumm","arr","reduce","prev","current","currentExchangerate","uzs","usd","_ref","type","onClick","active","propsType","product","icon","_jsx","IoNewspaperOutline","className","bgColor","selling","IoCartOutline","payments","IoCubeOutline","income","IoEnterOutline","children","placeholder","onChange","label","disabled","onKeyUp","_jsxs","onWheel","e","target","blur","min","regexForTypeNumber","border","navbarExpended","director","user","useSelector","state","login","checkImageHas","image","indexOf","_Fragment","src","alt","firstname","toUpperCase","lastname","_market$director","_market$director2","market","ConnectionAvatar","t","name","phone","inn","toLocaleString","Link","to","_id","FilialButtons","useTranslation","dispatch","useDispatch","marketByInn","connections","sendingRequests","incomingRequests","countOfNewRequests","modalVisible","setModalVisible","useState","setInn","modalBody","setModalBody","connectionMarkets","setConnectionMarkets","allSendingRequests","setAllSendingRequests","allIncomingRequests","setAllIncomingRequests","handleAnswerRequest","connection","answerToRequest","then","_ref4","error","incomingRequestsToConnection","getConnectionMarkets","getNewRequestsToConnection","useEffect","sendingRequestsToConnection","UniversalModal","body","toggleModal","approveFunction","handleCreateRequestToConnection","firstMarket","secondMarket","createRequestToConnection","_ref2","clearMarketByInn","closeModal","handelCloseModal","isOpen","handleDeleteRequest","connectionId","deleteRequestToConnection","_ref3","handleAcceptRequest","accept","rejected","request","handleRejectRequest","FieldContainer","Button","preventDefault","getMarketByInn","add","text","edit","count","bell","SearchForm","filterBy","filterByMarketName","toLowerCase","filtered","filter","includes","filterByMarketInn","filterByDirectorName","FilialConnectionCard","uniqueId"],"sourceRoot":""}