{"version":3,"file":"static/js/9834.aed8ef7e.chunk.js","mappings":"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","sources":["Components/Buttons/SearchButton.js","Pages/Category/Category.js"],"sourcesContent":["import React from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FaFilter } from \"react-icons/fa\";\r\nfunction SearchButton({data}) {\r\n    const {t} = useTranslation(['common'])\r\n  return (\r\n    <button onClick={()=>data(true)} className=' hover:bg-blue-200  bg-blue-400 focus-visible:outline-none w-[100px] lg:h-[33px] h=[40px] createElement '><FaFilter   /> {t('izlash')}</button>\r\n  )\r\n}\r\n\r\nexport default SearchButton\r\n ","import React, {useEffect, useState} from 'react'\r\nimport FieldContainer from '../../Components/FieldContainer/FieldContainer.js'\r\nimport Button from '../../Components/Buttons/BtnAddRemove.js'\r\nimport SearchForm from '../../Components/SearchForm/SearchForm.js'\r\nimport Spinner from '../../Components/Spinner/SmallLoader.js'\r\nimport NotFind from '../../Components/NotFind/NotFind.js'\r\nimport Table from '../../Components/Table/Table.js'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {regexForTypeNumber} from '../../Components/RegularExpressions/RegularExpressions.js'\r\nimport {checkEmptyString, exportExcel, universalSort} from '../../App/globalFunctions.js'\r\nimport UniversalModal from '../../Components/Modal/UniversalModal.js'\r\nimport {motion} from 'framer-motion'\r\nimport SearchButton from '../../Components/Buttons/SearchButton.js'\r\n\r\nimport './Category.scss'\r\nimport {\r\n    successAddCategoryMessage,\r\n    successDeleteCategoryMessage,\r\n    successUpdateCategoryMessage,\r\n    universalToast,\r\n    warningCategory,\r\n    warningEmptyInput\r\n} from '../../Components/ToastMessages/ToastMessages.js'\r\nimport {\r\n    addCategory,\r\n    clearErrorAddCategory,\r\n    clearErrorDeleteCategory,\r\n    clearErrorGetAllCategories,\r\n    clearErrorUpdateCategory,\r\n    clearSearchedCategories,\r\n    clearSuccessAddCategory,\r\n    clearSuccessDeleteCategory,\r\n    clearSuccessUpdateCategory,\r\n    deleteCategory,\r\n    getCategories,\r\n    getCategoriesByFilter,\r\n    updateCategory\r\n} from './categorySlice.js'\r\nimport Pagination from '../../Components/Pagination/Pagination.js'\r\nimport {useTranslation} from 'react-i18next'\r\nimport {filter, map} from 'lodash'\r\nimport ExportBtn from '../../Components/Buttons/ExportBtn.js'\r\nimport SelectForm from '../../Components/Select/SelectForm.js'\r\nimport {VscChromeClose} from 'react-icons/vsc'\r\nimport TableMobile from '../../Components/Table/TableMobile.js'\r\nimport {FaFilter} from 'react-icons/fa'\r\n\r\n\r\nconst Category = () => {\r\n    const {t} = useTranslation(['common'])\r\n\r\n    const headers = [\r\n        {\r\n            title: t('№'),\r\n            styles: 'w-[10%]'\r\n        },\r\n        {\r\n            title: t('Kategoriya kodi'),\r\n            filter: 'code',\r\n        },\r\n        {\r\n            title: t('Kategoriya nomi'),\r\n            filter: 'name',\r\n            // styles: 'w-[60%]'\r\n        },\r\n        {\r\n            title:t('Sotilganlar soni'),\r\n            filter: 'totalproducts',\r\n        },\r\n        {\r\n            title: t('Sotilganlar jami'),\r\n            filter: 'totalsales',\r\n        },\r\n        {\r\n            title: t('Sof foyda'),\r\n            filter: 'profit',\r\n        },\r\n        {\r\n            title: '',\r\n            styles: 'w-[15%]'\r\n        }\r\n    ]\r\n\r\n    const dispatch = useDispatch()\r\n    const {\r\n        categories,\r\n        errorGetCategories,\r\n        searchedCategories,\r\n        loading,\r\n        total,\r\n        totalSearched,\r\n        errorAddCategory,\r\n        successAddCategory,\r\n        successUpdateCategory,\r\n        errorUpdateCategory,\r\n        successDeleteCategory,\r\n        errorDeleteCategory\r\n    } = useSelector((state) => state.category)\r\n    const [data, setData] = useState(categories)\r\n    const [searchedData, setSearchedData] = useState(searchedCategories)\r\n    const [codeOfCategory, setCodeOfCategory] = useState('')\r\n    const [nameOfCategory, setNameOfCategory] = useState('')\r\n    const [searchByCode, setSearchByCode] = useState('')\r\n    const [searchByName, setSearchByName] = useState('')\r\n    const [showByTotal, setShowByTotal] = useState('10')\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n    const [filteredDataTotal, setFilteredDataTotal] = useState(total)\r\n    const [stickyForm, setStickyForm] = useState(false)\r\n    const [sorItem, setSorItem] = useState({\r\n        filter: '',\r\n        sort: '',\r\n        count: 0\r\n    })\r\n    const [currentCategory, setCurrentCategory] = useState(null)\r\n    const [deletedCategory, setDeletedCategory] = useState(null)\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n\r\n    const [startDate, setStartDate] = useState(\r\n        new Date(\r\n            new Date().getFullYear(),\r\n            new Date().getMonth(),\r\n            new Date().getDate()\r\n        )\r\n    )\r\n    const [endDate, setEndDate] = useState(new Date())\r\n    const [modalOpen, setModalOpen]=useState(false)\r\n    const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\r\n    // modal toggle\r\n    const toggleModal = () => setModalVisible(!modalVisible)\r\n\r\n    // handle change of inputs\r\n    const handleChangeCodeOfCategory = (e) => {\r\n        let val = e.target.value\r\n        if (regexForTypeNumber.test(val)) {\r\n            setCodeOfCategory(val)\r\n        }\r\n    }\r\n    const handleChangeNameOfCategory = (e) => {\r\n        setNameOfCategory(e.target.value)\r\n    }\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setIsMobile(window.innerWidth <= 768);\r\n        };\r\n\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    }, []);\r\n\r\n    // filter by total\r\n    const filterByTotal = ({value}) => {\r\n        setShowByTotal(value)\r\n        setCurrentPage(0)\r\n    }\r\n\r\n    // table edit and delete\r\n    const handleEditCategory = (category) => {\r\n        setCurrentCategory(category)\r\n        setCodeOfCategory(category.code)\r\n        setNameOfCategory(category.name)\r\n        setStickyForm(true)\r\n    }\r\n\r\n    const handleEdit = (e) => {\r\n        e.preventDefault()\r\n        const {failed, message} = checkEmptyString(\r\n            [\r\n                {\r\n                    value: codeOfCategory,\r\n                    message: t('Kategoriya kodi')\r\n                },\r\n                {\r\n                    value: nameOfCategory,\r\n                    message: t('Kategoriya nomi')\r\n                }\r\n            ]\r\n        )\r\n        if (failed) {\r\n            warningEmptyInput(message)\r\n        } else {\r\n            const body = {\r\n                currentPage,\r\n                countPage: showByTotal,\r\n                search: {\r\n                    name: searchByName.replace(/\\s+/g, ' ').trim(),\r\n                    code: searchByCode.replace(/\\s+/g, ' ').trim()\r\n                },\r\n                category: {\r\n                    name: nameOfCategory,\r\n                    code: codeOfCategory,\r\n                    _id: currentCategory._id\r\n                }\r\n            }\r\n            dispatch(updateCategory(body))\r\n        }\r\n    }\r\n\r\n    const handleDeleteCategory = (category) => {\r\n        const body = {\r\n            ...category,\r\n            currentPage,\r\n            countPage: showByTotal,\r\n            search: {\r\n                name: searchByName.replace(/\\s+/g, ' ').trim(),\r\n                code: searchByCode.replace(/\\s+/g, ' ').trim()\r\n            }\r\n        }\r\n        setDeletedCategory(body)\r\n        toggleModal()\r\n    }\r\n    const handleClickApproveToDelete = () => {\r\n        dispatch(deleteCategory(deletedCategory))\r\n        handleClickCancelToDelete()\r\n    }\r\n    const handleClickCancelToDelete = () => {\r\n        setModalVisible(false)\r\n        setDeletedCategory(null)\r\n    }\r\n\r\n    // handle submit of inputs\r\n    const addNewcategory = (e) => {\r\n        e.preventDefault()\r\n        const {failed, message} = checkEmptyString(\r\n            [\r\n                {\r\n                    value: codeOfCategory,\r\n                    message: t('Kategoriya kodi')\r\n                },\r\n                {\r\n                    value: nameOfCategory,\r\n                    message: t('Kategoriya nomi')\r\n                }\r\n            ]\r\n        )\r\n        if (failed) {\r\n            warningEmptyInput(message)\r\n        } else {\r\n            const body = {\r\n                currentPage,\r\n                countPage: showByTotal,\r\n                category: {\r\n                    name: nameOfCategory,\r\n                    code: codeOfCategory\r\n                },\r\n                search: {\r\n                    name: searchByName.replace(/\\s+/g, ' ').trim(),\r\n                    code: searchByCode.replace(/\\s+/g, ' ').trim()\r\n                }\r\n            }\r\n            dispatch(addCategory(body))\r\n        }\r\n    }\r\n\r\n    const clearForm = (e) => {\r\n        e && e.preventDefault()\r\n        setCodeOfCategory('')\r\n        setNameOfCategory('')\r\n        setCurrentCategory(null)\r\n        setStickyForm(false)\r\n    }\r\n\r\n    // handle change of search inputs\r\n    const filterByCode = (e) => {\r\n        let val = e.target.value\r\n        let valForSearch = val.replace(/\\s+/g, ' ').trim()\r\n        setSearchByCode(val)\r\n        ;(searchedData.length > 0 || totalSearched > 0) &&\r\n        dispatch(clearSearchedCategories())\r\n        if (valForSearch === '') {\r\n            setData(categories)\r\n            setFilteredDataTotal(total)\r\n        } else {\r\n            const filteredCategories = filter(categories, (category) => {\r\n                return category.code.includes(valForSearch)\r\n            })\r\n            setData(filteredCategories)\r\n            setFilteredDataTotal(filteredCategories.length)\r\n        }\r\n    }\r\n    const filterByName = (e) => {\r\n        let val = e.target.value\r\n        let valForSearch = val.toLowerCase().replace(/\\s+/g, ' ').trim()\r\n        setSearchByName(val)\r\n        ;(searchedData.length > 0 || totalSearched > 0) &&\r\n        dispatch(clearSearchedCategories())\r\n        if (valForSearch === '') {\r\n            setData(categories)\r\n            setFilteredDataTotal(total)\r\n        } else {\r\n            const filteredCategories = filter(categories, (category) => {\r\n                return (\r\n                    category.name &&\r\n                    category.name.toLowerCase().includes(valForSearch)\r\n                )\r\n            })\r\n            setData(filteredCategories)\r\n            setFilteredDataTotal(filteredCategories.length)\r\n        }\r\n    }\r\n    const filterByCodeAndNameWhenPressEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n            setCurrentPage(0)\r\n            const body = {\r\n                currentPage: 0,\r\n                countPage: showByTotal,\r\n                search: {\r\n                    name: searchByName.replace(/\\s+/g, ' ').trim(),\r\n                    code: searchByCode.replace(/\\s+/g, ' ').trim()\r\n                }\r\n            }\r\n            dispatch(getCategoriesByFilter(body))\r\n        }\r\n    }\r\n\r\n    const filterData = (filterKey) => {\r\n        if (filterKey === sorItem.filter) {\r\n            switch (sorItem.count) {\r\n                case 1:\r\n                    setSorItem({\r\n                        filter: filterKey,\r\n                        sort: '1',\r\n                        count: 2\r\n                    })\r\n                    universalSort(\r\n                        searchedData.length > 0 ? searchedData : data,\r\n                        searchedData.length > 0 ? setSearchedData : setData,\r\n                        filterKey,\r\n                        1,\r\n                        searchedData.length > 0\r\n                            ? searchedCategories\r\n                            : categories\r\n                    )\r\n                    break\r\n                case 2:\r\n                    setSorItem({\r\n                        filter: filterKey,\r\n                        sort: '',\r\n                        count: 0\r\n                    })\r\n                    universalSort(\r\n                        searchedData.length > 0 ? searchedData : data,\r\n                        searchedData.length > 0 ? setSearchedData : setData,\r\n                        filterKey,\r\n                        '',\r\n                        searchedData.length > 0\r\n                            ? searchedCategories\r\n                            : categories\r\n                    )\r\n                    break\r\n                default:\r\n                    setSorItem({\r\n                        filter: filterKey,\r\n                        sort: '-1',\r\n                        count: 1\r\n                    })\r\n                    universalSort(\r\n                        searchedData.length > 0 ? searchedData : data,\r\n                        searchedData.length > 0 ? setSearchedData : setData,\r\n                        filterKey,\r\n                        -1,\r\n                        searchedData.length > 0\r\n                            ? searchedCategories\r\n                            : categories\r\n                    )\r\n            }\r\n        } else {\r\n            setSorItem({\r\n                filter: filterKey,\r\n                sort: '-1',\r\n                count: 1\r\n            })\r\n            universalSort(\r\n                searchedData.length > 0 ? searchedData : data,\r\n                searchedData.length > 0 ? setSearchedData : setData,\r\n                filterKey,\r\n                -1,\r\n                searchedData ? searchedCategories : categories,\r\n                searchedData.length > 0\r\n            )\r\n        }\r\n    }\r\n    \r\n    const excelData = () => {\r\n        let fileName = 'Kategoriyalar'\r\n        const exportHeader = ['№', 'Kodi', 'Nomi']\r\n        if (data?.length > 0) {\r\n            const categoryData = map(data, (item, index) => ({\r\n                nth: index + 1,\r\n                code: item?.code || '',\r\n                name: item?.name || ''\r\n            }))\r\n            exportExcel(categoryData, fileName, exportHeader)\r\n        } else {\r\n            universalToast('Jadvalda ma\\'lumot mavjud emas !', 'warning')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (errorGetCategories) {\r\n            warningCategory()\r\n            dispatch(clearErrorGetAllCategories())\r\n        }\r\n        if (errorAddCategory) {\r\n            universalToast(errorAddCategory, 'error')\r\n            dispatch(clearErrorAddCategory())\r\n        }\r\n        if (successAddCategory) {\r\n            successAddCategoryMessage()\r\n            dispatch(clearSuccessAddCategory())\r\n            clearForm()\r\n        }\r\n\r\n        if (successUpdateCategory) {\r\n            successUpdateCategoryMessage()\r\n            dispatch(clearSuccessUpdateCategory())\r\n            clearForm()\r\n        }\r\n        if (errorUpdateCategory) {\r\n            universalToast(errorUpdateCategory, 'error')\r\n            dispatch(clearErrorUpdateCategory())\r\n        }\r\n\r\n        if (errorDeleteCategory) {\r\n            universalToast(errorDeleteCategory, 'error')\r\n            dispatch(clearErrorDeleteCategory())\r\n        }\r\n        if (successDeleteCategory) {\r\n            successDeleteCategoryMessage()\r\n            dispatch(clearSuccessDeleteCategory())\r\n        }\r\n    }, [\r\n        dispatch,\r\n        errorGetCategories,\r\n        errorAddCategory,\r\n        successAddCategory,\r\n        successUpdateCategory,\r\n        errorUpdateCategory,\r\n        errorDeleteCategory,\r\n        successDeleteCategory\r\n    ])\r\n    useEffect(() => {\r\n        const body = {\r\n            currentPage,\r\n            countPage: showByTotal,\r\n            search: {\r\n                name: searchByName.replace(/\\s+/g, ' ').trim(),\r\n                code: searchByCode.replace(/\\s+/g, ' ').trim()\r\n            },\r\n            startDate,\r\n            endDate\r\n        }\r\n        dispatch(getCategories(body))\r\n        //    eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [currentPage, showByTotal, dispatch, startDate, endDate])\r\n    useEffect(() => {\r\n        setData(categories)\r\n    }, [categories])\r\n    useEffect(() => {\r\n        setFilteredDataTotal(total)\r\n    }, [total])\r\n    useEffect(() => {\r\n        setSearchedData(searchedCategories)\r\n    }, [searchedCategories])\r\n\r\n    return (\r\n        <motion.section\r\n            key='content'\r\n            initial='collapsed'\r\n            animate='open'\r\n            exit='collapsed'\r\n            variants={{\r\n                open: {opacity: 1, height: 'auto'},\r\n                collapsed: {opacity: 0, height: 0}\r\n            }}\r\n            transition={{duration: 0.8, ease: [0.04, 0.62, 0.23, 0.98]}}\r\n        >\r\n            <UniversalModal\r\n                body='approve'\r\n                toggleModal={toggleModal}\r\n                headerText={`${deletedCategory && deletedCategory.code} - ${t(\r\n                    'kategoriyani o`chirishni tasdiqlaysizmi?'\r\n                )}`}\r\n                title={t(\r\n                    'O`chirilgan kategoriyalarni tiklashning imkoni mavjud emas!'\r\n                )}\r\n                approveFunction={handleClickApproveToDelete}\r\n                closeModal={handleClickCancelToDelete}\r\n                isOpen={modalVisible}\r\n            />\r\n            <form\r\n                className={`flex gap-[1.25rem] mt-[40px] bg-background ps-[20px] flex-col mainPadding transition ease-linear duration-200 ${\r\n                    stickyForm ? 'stickyForm' : ''\r\n                }`}\r\n            >\r\n                <div className='supplier-style'>\r\n                    <span className='lg:w-[400px] w-[90vw]'>\r\n                    <FieldContainer\r\n                        value={codeOfCategory}\r\n                        onChange={handleChangeCodeOfCategory}\r\n                        label={t('Kategoriya kodi')}\r\n                        placeholder={`${t('misol')}: 000000`}\r\n                        className='input-category '\r\n                    />\r\n                    </span>\r\n                    <FieldContainer\r\n                        value={nameOfCategory}\r\n                        label={t('Kategoriya nomi')}\r\n                        placeholder={''}\r\n                        maxWidth={'w-[29rem]'}\r\n                        type={'string'}\r\n                        onChange={handleChangeNameOfCategory}\r\n                    />\r\n                    <div className={'flex gap-[1.25rem] grow'}>\r\n                        <span className='lg:w-[300px]'>\r\n                        <Button\r\n                            onClick={stickyForm ? handleEdit : addNewcategory}\r\n                            add={!stickyForm}\r\n                            edit={stickyForm }\r\n                            text={\r\n                                stickyForm\r\n                                    ? t('Saqlash')\r\n                                    : t('Yangi kategoriya qo\\'shish')\r\n                            }\r\n                        />\r\n                        </span>\r\n                        <span className='w-[200px] me-[-100px]'>\r\n\r\n                        <Button onClick={clearForm} text={t('Tozalash')} />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n            <>\r\n                {\r\n                    modalOpen?<div className='absolute lg:p-[50px] w-[100vw]  h-[100vh]  flex justify-evenly flex-wrap items-center  top-0\tleft-0 z-50 bg-[white]\t'>\r\n                    <VscChromeClose  onClick={()=>setModalOpen(false)} className=' absolute right-[20px]  top-[20px]  text-4xl cursor-pointer'/>\r\n                \r\n                        <SearchForm\r\n                                filterBy={['total', 'category', 'name', 'startDate', 'endDate']}\r\n                                filterByTotal={filterByTotal}\r\n                                filterByCategory={filterByCode}\r\n                                filterByName={filterByName}\r\n                                \r\n                                filterByCodeAndNameAndCategoryWhenPressEnter={\r\n                                    filterByCodeAndNameWhenPressEnter\r\n                                }\r\n                                startDate={startDate}\r\n                                setStartDate={setStartDate}\r\n                                endDate={endDate}\r\n                                setEndDate={setEndDate}\r\n                            />\r\n                    <button onClick={() => {\r\n                  setModalOpen(false);\r\n                  \r\n                }}  className='d-block  hover:bg-green-200  bg-green-400 mt-[-200px] lg:mt-[25px]  focus-visible:outline-none w-[150px] h-[40px] createElement '><FaFilter   /> {t('izlash')}</button>\r\n                    </div>:null\r\n                }\r\n                \r\n                </>\r\n                \r\n                <div className='  flex flex-nowrap justify-evenly mb-2 gap-2 items-center lg:justify-start'>\r\n                <SelectForm  key={'total_1'}  onSelect={filterByTotal}/>\r\n                {isMobile?<SearchButton data={setModalOpen}/>:null}\r\n                <ExportBtn\r\n                    onClick={excelData}\r\n                />\r\n                \r\n                </div>\r\n                {!isMobile?\r\n                <SearchForm\r\n                                filterBy={['total', 'category', 'name', 'startDate', 'endDate']}\r\n                                filterByTotal={filterByTotal}\r\n                                filterByCategory={filterByCode}\r\n                                filterByName={filterByName}\r\n                                \r\n                                filterByCodeAndNameAndCategoryWhenPressEnter={\r\n                                    filterByCodeAndNameWhenPressEnter\r\n                                }\r\n                                startDate={startDate}\r\n                                setStartDate={setStartDate}\r\n                                endDate={endDate}\r\n                                setEndDate={setEndDate}\r\n                            />:null}\r\n            \r\n\r\n            \r\n            {\r\n                !isMobile ? <div className=' tableContainerPadding '>\r\n                {loading ? (\r\n                    <Spinner />\r\n                ) : data.length === 0 && searchedData.length === 0 ? (\r\n                    <NotFind text={t('Maxsulot mavjud emas')} />\r\n                ) : (\r\n                    <Table\r\n                        headers={headers}\r\n                        Edit={handleEditCategory}\r\n                        Delete={handleDeleteCategory}\r\n                        page={'category'}\r\n                        data={searchedData.length > 0 ? searchedData : data}\r\n                        Sort={filterData}\r\n                        sortItem={sorItem}\r\n                        currentPage={currentPage}\r\n                        countPage={showByTotal}\r\n                        startDate={startDate}\r\n                        endDate={endDate}\r\n                    />\r\n                )}\r\n            </div> : <div className=''>\r\n                {loading ? (\r\n                    <Spinner />\r\n                ) : data.length === 0 && searchedData.length === 0 ? (\r\n                    <NotFind text={t('Maxsulot mavjud emas')} />\r\n                ) : (\r\n                    <TableMobile\r\n                        headers={headers}\r\n                        Edit={handleEditCategory}\r\n                        Delete={handleDeleteCategory}\r\n                        page={'category'}\r\n                        data={searchedData.length > 0 ? searchedData : data}\r\n                        Sort={filterData}\r\n                        sortItem={sorItem}\r\n                        currentPage={currentPage}\r\n                        countPage={showByTotal}\r\n                        startDate={startDate}\r\n                        endDate={endDate}\r\n                    />\r\n                )}\r\n            </div>\r\n            }\r\n            <div className=' pagination-supplier ps-[0px] mainPadding flex flex-nowrap justify-center '>\r\n                \r\n                <p className='supplier-title'>{t('')}</p>\r\n                {(filteredDataTotal !== 0 || totalSearched !== 0) && (\r\n                    <Pagination\r\n                        countPage={Number(showByTotal)}\r\n                        totalDatas={totalSearched || filteredDataTotal}\r\n                        currentPage={currentPage}\r\n                        setCurrentPage={setCurrentPage}\r\n                    />\r\n                )}\r\n            </div>\r\n            \r\n        </motion.section>\r\n    )\r\n}\r\n\r\nexport default Category\r\n"],"names":["_ref","data","t","useTranslation","_jsxs","onClick","className","children","_jsx","FaFilter","Category","headers","title","styles","filter","dispatch","useDispatch","categories","errorGetCategories","searchedCategories","loading","total","totalSearched","errorAddCategory","successAddCategory","successUpdateCategory","errorUpdateCategory","successDeleteCategory","errorDeleteCategory","useSelector","state","category","setData","useState","searchedData","setSearchedData","codeOfCategory","setCodeOfCategory","nameOfCategory","setNameOfCategory","searchByCode","setSearchByCode","searchByName","setSearchByName","showByTotal","setShowByTotal","currentPage","setCurrentPage","filteredDataTotal","setFilteredDataTotal","stickyForm","setStickyForm","sorItem","setSorItem","sort","count","currentCategory","setCurrentCategory","deletedCategory","setDeletedCategory","modalVisible","setModalVisible","startDate","setStartDate","Date","getFullYear","getMonth","getDate","endDate","setEndDate","modalOpen","setModalOpen","isMobile","setIsMobile","window","innerWidth","toggleModal","useEffect","handleResize","addEventListener","removeEventListener","filterByTotal","value","handleEditCategory","code","name","handleDeleteCategory","body","countPage","search","replace","trim","handleClickCancelToDelete","clearForm","e","preventDefault","filterByCode","val","target","valForSearch","length","clearSearchedCategories","filteredCategories","includes","filterByName","toLowerCase","filterByCodeAndNameWhenPressEnter","key","getCategoriesByFilter","filterData","filterKey","universalSort","warningCategory","clearErrorGetAllCategories","universalToast","clearErrorAddCategory","successAddCategoryMessage","clearSuccessAddCategory","successUpdateCategoryMessage","clearSuccessUpdateCategory","clearErrorUpdateCategory","clearErrorDeleteCategory","successDeleteCategoryMessage","clearSuccessDeleteCategory","getCategories","motion","section","initial","animate","exit","variants","open","opacity","height","collapsed","transition","duration","ease","UniversalModal","headerText","approveFunction","handleClickApproveToDelete","deleteCategory","closeModal","isOpen","FieldContainer","onChange","regexForTypeNumber","test","label","placeholder","maxWidth","type","Button","failed","message","checkEmptyString","warningEmptyInput","_id","updateCategory","addCategory","add","edit","text","_Fragment","VscChromeClose","SearchForm","filterBy","filterByCategory","filterByCodeAndNameAndCategoryWhenPressEnter","SelectForm","onSelect","SearchButton","ExportBtn","excelData","exportHeader","categoryData","map","item","index","nth","exportExcel","Spinner","NotFind","TableMobile","Edit","Delete","page","Sort","sortItem","Table","Pagination","Number","totalDatas"],"sourceRoot":""}