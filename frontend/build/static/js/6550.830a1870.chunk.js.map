{"version":3,"file":"static/js/6550.830a1870.chunk.js","mappings":"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","sources":["App/globalFunctions.js","Components/Inputs/TableInput.js","Components/RegularExpressions/RegularExpressions.js","Components/CheckoutCard/CheckoutCards.js","Pages/Reports/Reports.js"],"sourcesContent":["import {regexForEmptyString} from '../Components/RegularExpressions/RegularExpressions.js'\r\nimport {orderBy, reduce} from 'lodash'\r\nimport * as XLSX from 'xlsx'\r\n\r\nexport const universalSort = (data, setData, key, sort, prevData) => {\r\n    const keys = key.split('.')\r\n    const result = sort\r\n        ? orderBy(\r\n            [...data],\r\n            (item) => {\r\n                return keys.length === 3\r\n                    ? item[keys[0]][keys[1]][keys[2]]\r\n                    : keys.length === 2\r\n                        ? item[keys[0]][keys[1]]\r\n                        : item[key]\r\n            },\r\n            [sort === -1 ? 'desc' : 'asc']\r\n        )\r\n        : prevData\r\n    setData(result)\r\n}\r\nexport const UsdToUzs = (val, currency) => Math.round(val * currency)\r\n\r\nexport const UzsToUsd = (val, currency) =>\r\n    Math.round((val / currency) * 1000) / 1000\r\n\r\n// check empty string\r\nexport const checkEmptyString = (values) => {\r\n    let result = {failed: false, message: ''}\r\n    for (let i = 0; i < values.length; i++) {\r\n        if (regexForEmptyString.test(values[i].value)) {\r\n            result = {\r\n                message: values[i].message,\r\n                failed: true\r\n            }\r\n            break\r\n        }\r\n    }\r\n    return result\r\n}\r\n// export excel\r\nexport const exportExcel = (data, fileName, headers) => {\r\n    const autoFillColumnWidth = (json) => {\r\n        const cols = Object.keys(json[0])\r\n        return cols.map((key, index) => {\r\n            let maxLength = Math.max(\r\n                ...json.map((x) => x[key].toString().length)\r\n            )\r\n            return {\r\n                wch:\r\n                    headers[index].length > maxLength\r\n                        ? headers[index].length + 1\r\n                        : maxLength + 4\r\n            }\r\n        })\r\n    }\r\n    const wscols = autoFillColumnWidth(data)\r\n    const wb = XLSX.utils.book_new()\r\n    const ws = XLSX.utils.json_to_sheet([])\r\n    ws['!cols'] = wscols\r\n    XLSX.utils.sheet_add_aoa(ws, [headers])\r\n    XLSX.utils.sheet_add_json(ws, data, {\r\n        origin: 'A2',\r\n        skipHeader: true\r\n    })\r\n    XLSX.utils.book_append_sheet(wb, ws, 'Maxsulotlar')\r\n    XLSX.writeFile(wb, `${fileName}-${new Date().toLocaleDateString()}.xlsx`)\r\n}\r\n\r\n// round UZS||USD\r\nexport const roundUzs = (val) => Math.round(val * 1) / 1\r\n\r\nexport const roundUsd = (val) => Math.round(val * 1000) / 1000\r\n\r\n// reduce\r\nexport const reduceSumm = (arr, key) =>\r\n    reduce(arr, (prev, current) => prev + current[key], 0)\r\n\r\n// current Exchange\r\nexport const currentExchangerate = (uzs, usd) => roundUzs(uzs / usd)\r\n","function TableInput({\r\n                        placeholder,\r\n                        type,\r\n                        value,\r\n                        onChange,\r\n                        label,\r\n                        disabled,\r\n                        onKeyUp\r\n                    }) {\r\n    return (\r\n        <div className={'w-full'}>\r\n            <label>\r\n                {label}\r\n                <input\r\n                    disabled={disabled}\r\n                    className='tableInput lg:h-[auto]  h-[30px]'\r\n                    placeholder={placeholder}\r\n                    type={type}\r\n                    value={value}\r\n                    onChange={onChange}\r\n                    onKeyUp={onKeyUp}\r\n                    onWheel={(e) => e.target.blur()}\r\n                    min={0}\r\n                    \r\n                />\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableInput\r\n","export const regexForTypeNumber = /^\\d*\\.?\\d*$/\r\nexport const regexForEmptyString = /^\\s*$/","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CheckoutCards = ({\r\n    type,\r\n    onClick,\r\n    name,\r\n    active,\r\n    currency,\r\n    report,\r\n    path,\r\n}) => {\r\n    const chooseCardName = `cardContainer ${type === 'sale' ||\r\n            type === 'income' ||\r\n            type === 'payments'\r\n            ? 'tradeCard'\r\n            : type === 'expenses' || type === 'debts'\r\n                ? 'debts'\r\n                : type === 'backproducts'\r\n                    ? 'returnedCard'\r\n                    : type === 'discounts'\r\n                        ? 'discountCard'\r\n                        : ''\r\n        } ${active ? 'activeCard' : ''}`\r\n\r\n    return (\r\n        <Link to={`/kassa/${path}`} onClick={onClick}>\r\n            <span className={chooseCardName}>\r\n                <span className='tradeIn'>\r\n                    <span\r\n                        className={\r\n                            type === 'income' ? 'hidden' : 'parcentageWidth'\r\n                        }\r\n                    >\r\n                        <span\r\n                            className={\r\n                                type === 'income'\r\n                                    ? 'hidden'\r\n                                    : 'percentageCircle'\r\n                            }\r\n                        >\r\n                            <span> {report[type + 'count']} </span>\r\n                        </span>\r\n                    </span>\r\n                    <span className='w-full'>\r\n                        <span\r\n                            className={\r\n                                type === 'income' ? 'checkName' : 'checkoutName'\r\n                            }\r\n                        >\r\n                            <p className='text-[1.5rem]'>{name}</p>\r\n                            <p className='text-[1.25rem] '>{currency}</p>\r\n                        </span>\r\n                        <div>\r\n                            <p className='costCard float-right'>\r\n                                {currency === 'UZS'\r\n                                    ? report[type + 'uzs'].toLocaleString(\r\n                                        'ru-Ru'\r\n                                    )\r\n                                    : report[type].toLocaleString('ru-Ru')}\r\n                            </p>\r\n                        </div>\r\n                    </span>\r\n                </span>\r\n            </span>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default CheckoutCards\r\n","import React, {useEffect, useState} from 'react'\r\nimport CheckoutCards from '../../Components/CheckoutCard/CheckoutCards'\r\nimport SearchForm from '../../Components/SearchForm/SearchForm.js'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {universalToast} from '../../Components/ToastMessages/ToastMessages.js'\r\nimport {map, uniqueId} from 'lodash'\r\nimport {VscClose} from 'react-icons/vsc'\r\n\r\nimport {\r\n    changeEndDate,\r\n    changeStartDate,\r\n    clearErrorReports,\r\n    getIncomings,\r\n    getProducts,\r\n    getReports,\r\n    getReportsForTotal,\r\n    getSaleProducts\r\n} from './reportsSlice.js'\r\nimport {useTranslation} from 'react-i18next'\r\nimport {motion} from 'framer-motion'\r\nimport UniversalModal from '../../Components/Modal/UniversalModal'\r\nimport {FaFilter} from 'react-icons/fa'\r\n\r\nconst Reports = () => {\r\n    const [isMobile, setIsMobile] = useState(window.innerWidth <= 768)\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setIsMobile(window.innerWidth <= 768)\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize)\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize)\r\n        }\r\n    }, [])\r\n    const [modalOpen, setModalOpen] = useState(false)\r\n    const {t} = useTranslation(['common'])\r\n\r\n    const card = [\r\n\r\n        {\r\n            name: 'Sof foyda',\r\n            type: 'income'\r\n        },\r\n        {\r\n            name: 'Xarajatlar',\r\n            type: 'expenses'\r\n        },\r\n        {\r\n            name: 'Tushumlar',\r\n            type: 'payments'\r\n        },\r\n        {\r\n            name: 'Qaytarilgan',\r\n            type: 'backproducts'\r\n        },\r\n        {\r\n            name: 'Chegirmalar',\r\n            type: 'discounts'\r\n        },\r\n        {\r\n            name: 'Qarzlar',\r\n            type: 'debts'\r\n        }\r\n    ]\r\n\r\n    const dispatch = useDispatch()\r\n    const {\r\n        reports,\r\n        clearErrorrReports,\r\n        errorReports,\r\n        productreport,\r\n        incomingreport,\r\n        totalreports,\r\n        saleproductsreport,\r\n        startDate,\r\n        endDate\r\n    } = useSelector((state) => state.reports)\r\n\r\n    const {currencyType} = useSelector((state) => state.currency)\r\n\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n    const [modalBody, setModalBody] = useState(null)\r\n\r\n    const handleClickPrint = () => {\r\n        setModalVisible(true)\r\n        setModalBody('totalReport')\r\n    }\r\n\r\n    const toggleClickPrint = () => {\r\n        setModalVisible(false)\r\n        setModalBody('')\r\n    }\r\n\r\n    const handleStartDate = (e) => {\r\n        dispatch(changeStartDate({start: e.toISOString()}))\r\n    }\r\n    const handleEndDate = (e) => {\r\n        dispatch(changeEndDate({end: e.toISOString()}))\r\n    }\r\n\r\n    useEffect(() => {\r\n        const body = {\r\n            startDate: new Date(\r\n                new Date(startDate).getFullYear(),\r\n                new Date(startDate).getMonth(),\r\n                new Date(startDate).getDate()\r\n            ).toISOString(),\r\n            endDate: endDate\r\n        }\r\n        let bodyTotal = {\r\n            startDate: new Date(\r\n                new Date().setMonth(new Date().getMonth() - 1)\r\n            ).toISOString(),\r\n            endDate: new Date()\r\n        }\r\n\r\n        dispatch(getReports(body))\r\n        dispatch(getProducts())\r\n        dispatch(getIncomings(bodyTotal))\r\n        dispatch(getReportsForTotal(bodyTotal))\r\n        dispatch(getSaleProducts(bodyTotal))\r\n    }, [dispatch, startDate, endDate])\r\n    useEffect(() => {\r\n        if (errorReports) {\r\n            universalToast(errorReports, 'error')\r\n            dispatch(clearErrorReports())\r\n        }\r\n    }, [dispatch, clearErrorrReports, errorReports])\r\n\r\n    return (\r\n        <motion.section\r\n            key='content'\r\n            initial='collapsed'\r\n            animate='open'\r\n            exit='collapsed'\r\n            variants={{\r\n                open: {opacity: 1, height: 'auto'},\r\n                collapsed: {opacity: 0, height: 0}\r\n            }}\r\n            transition={{duration: 0.8, ease: [0.04, 0.62, 0.23, 0.98]}}\r\n        >\r\n            <div className='mt-[60px]  flex items-center ps-[20px] pe-[20px]'>\r\n                {\r\n                    isMobile ?\r\n                        <button onClick={() => setModalOpen(true)}\r\n                                className='  hover:bg-blue-200  bg-blue-400   focus-visible:outline-none w-[116px] h-[34px] createElement '>\r\n                            <FaFilter /> {t('izlash')}</button> :\r\n                        <div className=''>\r\n                            <SearchForm\r\n                                filterBy={['startDate', 'endDate']}\r\n                                startDate={new Date(startDate)}\r\n                                endDate={new Date(endDate)}\r\n                                setStartDate={handleStartDate}\r\n                                setEndDate={handleEndDate}\r\n                            />\r\n                        </div>\r\n                }\r\n                {/*<PrintBtn key={'print_btn_1'}  onClick={handleClickPrint} />*/}\r\n            </div>\r\n\r\n            {\r\n                modalOpen ? <div className='fixed w-[100%] h-[100vh] bg-[white] z-50 top-0 start-0 pt-[50px]'>\r\n                    <VscClose onClick={() => setModalOpen(false)}\r\n                              className='absolute text-3xl end-[25px] top-[25px] cursor-pointer' />\r\n                    <SearchForm\r\n                        filterBy={['startDate', 'endDate']}\r\n                        startDate={new Date(startDate)}\r\n                        endDate={new Date(endDate)}\r\n                        setStartDate={handleStartDate}\r\n                        setEndDate={handleEndDate}\r\n                    />\r\n                    <div className='flex justify-center mt-[100px]'>\r\n                        <button onClick={() => setModalOpen(false)}\r\n                                className='  hover:bg-blue-200  bg-blue-400   focus-visible:outline-none w-[116px] h-[34px] createElement '>\r\n                            <FaFilter /> {t('izlash')}</button>\r\n                    </div>\r\n                </div> : null\r\n            }\r\n\r\n            <div className='checkout-card pl-[20px] mainPadding mt-[30px]'>\r\n                {reports &&\r\n                    map(card, (i) => (\r\n                        <CheckoutCards\r\n                            key={uniqueId('card')}\r\n                            path={i.type}\r\n                            name={t(i.name)}\r\n                            type={i.type}\r\n                            percentage={i.percentage}\r\n                            cost={i.cost}\r\n                            currency={currencyType}\r\n                            report={reports && reports[i.type]}\r\n                        />\r\n                    ))}\r\n            </div>\r\n            <UniversalModal\r\n                body={modalBody}\r\n                toggleModal={toggleClickPrint}\r\n                incomingreport={incomingreport}\r\n                productreport={productreport}\r\n                saleproductsreport={saleproductsreport}\r\n                totalreports={totalreports}\r\n                currency={currencyType}\r\n                isOpen={modalVisible}\r\n                headerText={\r\n                    modalBody === 'complete' &&\r\n                    'To\\'lovni amalga oshirishni tasdiqlaysizmi ?'\r\n                }\r\n                title={\r\n                    modalBody === 'complete' &&\r\n                    'To\\'lovni amalga oshirgach bu ma`lumotlarni o`zgaritirb bo`lmaydi !'\r\n                }\r\n            />\r\n        </motion.section>\r\n    )\r\n}\r\n\r\nexport default Reports\r\n"],"names":["universalSort","data","setData","key","sort","prevData","keys","split","orderBy","item","length","UsdToUzs","val","currency","Math","round","UzsToUsd","checkEmptyString","values","result","failed","message","i","regexForEmptyString","test","value","exportExcel","fileName","headers","wscols","json","Object","map","index","maxLength","max","x","toString","wch","wb","XLSX","book_new","ws","json_to_sheet","sheet_add_aoa","sheet_add_json","origin","skipHeader","book_append_sheet","Date","toLocaleDateString","roundUzs","roundUsd","reduceSumm","arr","reduce","prev","current","currentExchangerate","uzs","usd","_ref","placeholder","type","onChange","label","disabled","onKeyUp","_jsx","className","children","_jsxs","onWheel","e","target","blur","min","regexForTypeNumber","onClick","name","active","report","path","chooseCardName","Link","to","toLocaleString","Reports","isMobile","setIsMobile","useState","window","innerWidth","useEffect","handleResize","addEventListener","removeEventListener","modalOpen","setModalOpen","t","useTranslation","dispatch","useDispatch","reports","clearErrorrReports","errorReports","productreport","incomingreport","totalreports","saleproductsreport","startDate","endDate","useSelector","state","currencyType","modalVisible","setModalVisible","modalBody","setModalBody","handleStartDate","changeStartDate","start","toISOString","handleEndDate","changeEndDate","end","body","getFullYear","getMonth","getDate","bodyTotal","setMonth","getReports","getProducts","getIncomings","getReportsForTotal","getSaleProducts","universalToast","clearErrorReports","motion","section","initial","animate","exit","variants","open","opacity","height","collapsed","transition","duration","ease","FaFilter","SearchForm","filterBy","setStartDate","setEndDate","VscClose","CheckoutCards","percentage","cost","uniqueId","UniversalModal","toggleModal","toggleClickPrint","isOpen","headerText","title"],"sourceRoot":""}