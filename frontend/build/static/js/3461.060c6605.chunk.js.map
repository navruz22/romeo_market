{"version":3,"file":"static/js/3461.060c6605.chunk.js","mappings":"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","sources":["Pages/Orders/IncomingOrders/Routes/Orders.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport Table from '../../../../Components/Table/Table'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport Pagination from '../../../../Components/Pagination/Pagination'\r\nimport SearchForm from '../../../../Components/SearchForm/SearchForm'\r\nimport {clearSearchedOrders, getOrders, getOrdersByFilter, updateOrderPosition} from '../Slices/ordersSlice.js'\r\nimport Spinner from '../../../../Components/Spinner/SmallLoader.js'\r\nimport NotFind from '../../../../Components/NotFind/NotFind.js'\r\nimport {filter} from 'lodash'\r\nimport UniversalModal from '../../../../Components/Modal/UniversalModal.js'\r\nimport {t} from 'i18next'\r\n\r\nfunction Orders() {\r\n    const {currencyType} = useSelector((state) => state.currency)\r\n    const {orders, searchedOrders, count, searchedTotal, loading} = useSelector(\r\n        (state) => state.incomingOrders\r\n    )\r\n    const [data, setData] = useState(orders)\r\n\r\n    const dispatch = useDispatch()\r\n    const headers = [\r\n        {title: 'â„–'},\r\n        {title: 'Sana'},\r\n        {\r\n            title: 'Do\\'kon nomi'\r\n        },\r\n        {\r\n            title: 'INN',\r\n            filter: ''\r\n        },\r\n        {title: 'ID', filter: ''},\r\n        {title: 'Maxsulot turi', filter: ''},\r\n        {\r\n            title: 'Umumiy narxi',\r\n            filter: ''\r\n        },\r\n        {title: 'Check'},\r\n        {\r\n            title: 'Holati',\r\n            filter: ''\r\n        }\r\n    ]\r\n    const [filteredDataTotal, setFilteredDataTotal] = useState(count)\r\n    const [searchedData, setSearchedData] = useState(searchedOrders)\r\n    const [searchedtotal, setSearchedtotal] = useState(searchedTotal)\r\n    const [showByTotal, setShowByTotal] = useState('10')\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n    const [searchByName, setSearchByName] = useState('')\r\n    const [searchById, setSearchById] = useState('')\r\n    const [startDate, setStartDate] = useState(\r\n        new Date(new Date().getFullYear(), new Date().getMonth(), 1, 0, 0, 0)\r\n    )\r\n    const [endDate, setEndDate] = useState(new Date())\r\n    const [printedOrder, setPrintedOrder] = useState(null)\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n    const [modalBody, setModalBody] = useState(null)\r\n\r\n    const toggleModal = () => {\r\n        setModalVisible(!modalVisible)\r\n        setPrintedOrder(null)\r\n    }\r\n\r\n    // filter by total\r\n    const filterByTotal = ({value}) => {\r\n        setShowByTotal(value)\r\n        setCurrentPage(0)\r\n    }\r\n\r\n    const filterByMarketName = (e) => {\r\n        let val = e.target.value\r\n        let valForSearch = val.toLowerCase().replace(/\\s+/g, ' ').trim()\r\n        setSearchByName(val)\r\n        ;(searchedData.length > 0 || searchedtotal > 0) &&\r\n        dispatch(clearSearchedOrders())\r\n        if (valForSearch === '') {\r\n            setData(orders)\r\n            setFilteredDataTotal(count)\r\n        } else {\r\n            const filteredProducts = filter(orders, (market) => {\r\n                return market.sender.name.toLowerCase().includes(valForSearch)\r\n            })\r\n            setData(filteredProducts)\r\n            setFilteredDataTotal(filteredProducts.length)\r\n        }\r\n    }\r\n    const filterById = (e) => {\r\n        let val = e.target.value\r\n        let valForSearch = val.toLowerCase().replace(/\\s+/g, ' ').trim()\r\n        setSearchById(val)\r\n        ;(searchedData.length > 0 || searchedtotal > 0) &&\r\n        dispatch(clearSearchedOrders())\r\n        if (valForSearch === '') {\r\n            setData(orders)\r\n            setFilteredDataTotal(count)\r\n        } else {\r\n            const filteredProducts = filter(orders, (market) => {\r\n                return market.id.toString().includes(valForSearch)\r\n            })\r\n            setData(filteredProducts)\r\n            setFilteredDataTotal(filteredProducts.length)\r\n        }\r\n    }\r\n\r\n    const filterByMarketNameAndInnWhenPressEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n            setCurrentPage(0)\r\n            const body = {\r\n                currentPage,\r\n                countPage: showByTotal,\r\n                startDate: startDate.toISOString(),\r\n                endDate: endDate.toISOString(),\r\n                search: {\r\n                    id: searchById,\r\n                    inn: '',\r\n                    name: searchByName\r\n                }\r\n            }\r\n            dispatch(getOrdersByFilter(body))\r\n        }\r\n    }\r\n\r\n    const handleClickPrint = (order) => {\r\n        setModalBody('checkOrder')\r\n        setPrintedOrder(order)\r\n        setModalVisible(true)\r\n    }\r\n\r\n    const handleUpdatePosition = (position, orderId, index) => {\r\n\r\n\r\n        dispatch(updateOrderPosition({position, orderId})).then(\r\n            ({error, payload}) => {\r\n                if (!error) {\r\n                    const newData =\r\n                        searchedData.length > 0 ? [...searchedData] : [...data]\r\n                    newData[index] = payload\r\n                    searchedData.length > 0\r\n                        ? setSearchedData(newData)\r\n                        : setData(newData)\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    useEffect(() => {\r\n        const body = {\r\n            currentPage,\r\n            countPage: showByTotal,\r\n            startDate: startDate.toISOString(),\r\n            endDate: endDate.toISOString(),\r\n            search: {\r\n                id: '',\r\n                inn: '',\r\n                name: ''\r\n            }\r\n        }\r\n        dispatch(getOrders(body))\r\n    }, [currentPage, showByTotal, startDate, endDate, dispatch])\r\n    useEffect(() => {\r\n        setData(orders)\r\n    }, [orders])\r\n    useEffect(() => {\r\n        setFilteredDataTotal(count)\r\n    }, [count])\r\n    useEffect(() => {\r\n        setSearchedData(searchedOrders)\r\n    }, [searchedOrders])\r\n    useEffect(() => {\r\n        setSearchedtotal(searchedTotal)\r\n    }, [searchedTotal])\r\n\r\n    return (\r\n        <section>\r\n            <div className='pagination mainPadding'>\r\n                <p className='flex items-center'>{t(\"Ro'yxatlar\")}</p>\r\n                {(filteredDataTotal !== 0 || searchedtotal !== 0) && (\r\n                    <Pagination\r\n                        countPage={Number(showByTotal)}\r\n                        totalDatas={searchedtotal || filteredDataTotal}\r\n                        currentPage={currentPage}\r\n                        setCurrentPage={setCurrentPage}\r\n                    />\r\n                )}\r\n            </div>\r\n            <UniversalModal\r\n                order={printedOrder}\r\n                currency={currencyType}\r\n                body={modalBody}\r\n                isOpen={modalVisible}\r\n                toggleModal={toggleModal}\r\n            />\r\n            <SearchForm\r\n                filterBy={['total', 'startDate', 'endDate', 'id', 'marketName']}\r\n                endDate={endDate}\r\n                startDate={startDate}\r\n                setStartDate={setStartDate}\r\n                setEndDate={setEndDate}\r\n                filterByTotal={filterByTotal}\r\n                filterByMarketName={filterByMarketName}\r\n                filterById={filterById}\r\n                filterByIdWhenPressEnter={\r\n                    filterByMarketNameAndInnWhenPressEnter\r\n                }\r\n                filterByMarketNameWhenPressEnter={\r\n                    filterByMarketNameAndInnWhenPressEnter\r\n                }\r\n            />\r\n            <div className='tablePadding'>\r\n                {loading ? (\r\n                    <Spinner />\r\n                ) : data.length === 0 && searchedData.length === 0 ? (\r\n                    <NotFind text={`${t(\"Ro'yxat mavjud emas...\")}`} />\r\n                ) : (\r\n                    <Table\r\n                        data={searchedData.length > 0 ? searchedData : data}\r\n                        currentPage={currentPage}\r\n                        currency={currencyType}\r\n                        countPage={showByTotal}\r\n                        page={'registerIncomingOrder'}\r\n                        headers={headers}\r\n                        Print={handleClickPrint}\r\n                        updatePosition={handleUpdatePosition}\r\n                        // addPlus={addPlus}\r\n                        // Sort={filterData}\r\n                        // sortItem={sorItem}\r\n                    />\r\n                )}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Orders\r\n"],"names":["currencyType","useSelector","state","currency","orders","searchedOrders","count","searchedTotal","loading","incomingOrders","data","setData","useState","dispatch","useDispatch","filteredDataTotal","setFilteredDataTotal","searchedData","setSearchedData","searchedtotal","setSearchedtotal","showByTotal","setShowByTotal","currentPage","setCurrentPage","searchByName","setSearchByName","searchById","setSearchById","startDate","setStartDate","Date","getFullYear","getMonth","endDate","setEndDate","printedOrder","setPrintedOrder","modalVisible","setModalVisible","modalBody","setModalBody","filterByMarketNameAndInnWhenPressEnter","e","key","body","countPage","toISOString","search","id","inn","name","getOrdersByFilter","useEffect","getOrders","_jsxs","children","className","_jsx","t","Pagination","Number","totalDatas","UniversalModal","order","isOpen","toggleModal","SearchForm","filterBy","filterByTotal","_ref","value","filterByMarketName","val","target","valForSearch","toLowerCase","replace","trim","length","clearSearchedOrders","filteredProducts","filter","market","sender","includes","filterById","toString","filterByIdWhenPressEnter","filterByMarketNameWhenPressEnter","Spinner","NotFind","text","Table","page","headers","title","Print","updatePosition","handleUpdatePosition","position","orderId","index","updateOrderPosition","then","_ref2","error","payload","newData"],"sourceRoot":""}