{"version":3,"file":"static/js/1105.4c1194f5.chunk.js","mappings":"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","sources":["Pages/AdminProducts/AdminProduct.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport SearchForm from '../../Components/SearchForm/SearchForm'\r\nimport Table from '../../Components/Table/Table'\r\nimport BtnAddRemove from './../../Components/Buttons/BtnAddRemove'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    clearSearchedMarkets,\r\n    createDirector,\r\n    createMarket,\r\n    deleteMarket,\r\n    editDirector,\r\n    editMarket,\r\n    getMarkets,\r\n    getMarketsByFilter\r\n} from './adminproductsSlice.js'\r\nimport Pagination from '../../Components/Pagination/Pagination.js'\r\nimport Spinner from '../../Components/Spinner/SmallLoader.js'\r\nimport NotFind from '../../Components/NotFind/NotFind.js'\r\nimport UniversalModal from '../../Components/Modal/UniversalModal.js'\r\nimport {successAddDirectory, successEditProfile} from '../../Components/ToastMessages/ToastMessages.js'\r\nimport {filter} from 'lodash'\r\nimport {t} from 'i18next'\r\n\r\nconst AdminProduct = () => {\r\n    const dispatch = useDispatch()\r\n    const {\r\n        markets,\r\n        total,\r\n        searchedMarkets,\r\n        totalSearched,\r\n        loadingGetMarkets,\r\n        loadingDeleteMarket,\r\n    } = useSelector((state) => state.adminmarkets)\r\n    const [data, setData] = useState(markets)\r\n    const [searchedData, setSearchedData] = useState(searchedMarkets)\r\n    const [filteredDataTotal, setFilteredDataTotal] = useState(total)\r\n    const [showByTotal, setShowByTotal] = useState('10')\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n    const [name, setName] = useState('')\r\n    const [director, setDirector] = useState('')\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n    const [modalBody, setModalBody] = useState('')\r\n    const [currentStep, setCurrentStep] = useState(1)\r\n    const [bgActive, setBgActive] = useState(false)\r\n    const [createdMarketId, setCreatedMarketId] = useState(null)\r\n    const [image, setImage] = useState('')\r\n    const [currentMarket, setCurrentMarket] = useState(null)\r\n    const [editedMarket, setEditedMarket] = useState(null)\r\n    const [deletedMarket, setDeletedMarket] = useState(null)\r\n\r\n    const headers = [\r\n        {title: 'â„–', styles: 'text-center'},\r\n        {title: 'Logotip', styles: 'w-[4.25rem]'},\r\n        {title: \"Do'kon nomi\", styles: 'text-center'},\r\n        {title: 'Director', styles: 'text-center'},\r\n        {title: 'Telefon', styles: 'w-[7.875rem]'},\r\n        {title: \"Sa'nasi\", styles: ''},\r\n        {title: 'Turi', styles: 'text-center w-[3.1875rem]'},\r\n        {title: '', styles: 'w-[3rem]'},\r\n        {title: 'Delete', styles: 'w-[3rem]'},\r\n    ]\r\n\r\n    const toggleModal = () => {\r\n        setModalVisible(false)\r\n        setTimeout(() => {\r\n            setModalBody('')\r\n            setCurrentMarket(null)\r\n            setEditedMarket(null)\r\n            setImage('')\r\n            setCreatedMarketId(null)\r\n            setCurrentStep(1)\r\n            setBgActive(false)\r\n        }, 100)\r\n    }\r\n    const filterByTotal = ({value}) => {\r\n        setShowByTotal(value)\r\n        setCurrentPage(0)\r\n    }\r\n    const filterByMarketName = (e) => {\r\n        let val = e.target.value\r\n        let valForSearch = val.toLowerCase().replace(/\\s+/g, ' ').trim()\r\n        setName(val)\r\n        ;(searchedData.length > 0 || totalSearched > 0) &&\r\n            dispatch(clearSearchedMarkets())\r\n        if (valForSearch === '') {\r\n            setData(markets)\r\n            setFilteredDataTotal(total)\r\n        } else {\r\n            const filteredProducts = filter(markets, (market) => {\r\n                return market.name.toLowerCase().includes(valForSearch)\r\n            })\r\n            setData(filteredProducts)\r\n            setFilteredDataTotal(filteredProducts.length)\r\n        }\r\n    }\r\n    const filterByDirectorName = (e) => {\r\n        let val = e.target.value\r\n        let valForSearch = val.toLowerCase().replace(/\\s+/g, ' ').trim()\r\n        setDirector(val)\r\n        ;(searchedData.length > 0 || totalSearched > 0) &&\r\n            dispatch(clearSearchedMarkets())\r\n        if (valForSearch === '') {\r\n            setData(markets)\r\n            setFilteredDataTotal(total)\r\n        } else {\r\n            const filteredProducts = filter(markets, (market) => {\r\n                return (\r\n                    market.director.firstname\r\n                        .toLowerCase()\r\n                        .includes(valForSearch) ||\r\n                    market.director.lastname\r\n                        .toLowerCase()\r\n                        .includes(valForSearch)\r\n                )\r\n            })\r\n            setData(filteredProducts)\r\n            setFilteredDataTotal(filteredProducts.length)\r\n        }\r\n    }\r\n    const filterByMarketNameAndDirectorNameWhenPressEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n            setCurrentPage(0)\r\n            const body = {\r\n                currentPage: 0,\r\n                countPage: showByTotal,\r\n                search: {\r\n                    name: name.replace(/\\s+/g, ' ').trim(),\r\n                    director: director.replace(/\\s+/g, ' ').trim(),\r\n                },\r\n            }\r\n            dispatch(getMarketsByFilter(body))\r\n        }\r\n    }\r\n    const handleAddNext = (body) => {\r\n        dispatch(createMarket(body)).then(({error, payload}) => {\r\n            if (!error) {\r\n                setCurrentStep(currentStep + 1)\r\n                setBgActive(true)\r\n                setImage('')\r\n                setCreatedMarketId(payload._id)\r\n            }\r\n        })\r\n    }\r\n    const handleAddFinish = (data) => {\r\n        const body = {\r\n            ...data,\r\n            image,\r\n            market: createdMarketId,\r\n        }\r\n        dispatch(createDirector(body)).then(({error}) => {\r\n            if (!error) {\r\n                const body = {\r\n                    currentPage,\r\n                    countPage: showByTotal,\r\n                    search: {\r\n                        name: name.replace(/\\s+/g, ' ').trim(),\r\n                        director: director.replace(/\\s+/g, ' ').trim(),\r\n                    },\r\n                }\r\n                setImage('')\r\n                setCurrentStep(1)\r\n                setBgActive(false)\r\n                setCreatedMarketId(null)\r\n                successAddDirectory()\r\n                dispatch(getMarkets(body))\r\n                toggleModal()\r\n            }\r\n        })\r\n    }\r\n    const handleEditFinish = (data) => {\r\n        const body = {\r\n            ...data,\r\n            image,\r\n            market: createdMarketId,\r\n            _id: editedMarket.director._id,\r\n        }\r\n        dispatch(editDirector(body)).then(({error}) => {\r\n            if (!error) {\r\n                const body = {\r\n                    currentPage,\r\n                    countPage: showByTotal,\r\n                    search: {\r\n                        name: name.replace(/\\s+/g, ' ').trim(),\r\n                        director: director.replace(/\\s+/g, ' ').trim(),\r\n                    },\r\n                }\r\n                setImage('')\r\n                setCurrentStep(1)\r\n                setBgActive(false)\r\n                setCreatedMarketId(null)\r\n                successEditProfile()\r\n                dispatch(getMarkets(body))\r\n                toggleModal()\r\n            }\r\n        })\r\n    }\r\n    const handleEditNext = (body) => {\r\n        const sendingBody = {\r\n            market: {\r\n                ...body,\r\n                _id: editedMarket._id,\r\n            },\r\n        }\r\n        dispatch(editMarket(sendingBody)).then(({error, payload}) => {\r\n            if (!error) {\r\n                setCurrentStep(currentStep + 1)\r\n                setBgActive(true)\r\n                setImage(editedMarket?.director?.image || '')\r\n                setCreatedMarketId(payload._id)\r\n                const body = {\r\n                    currentPage,\r\n                    countPage: showByTotal,\r\n                    search: {\r\n                        name: name.replace(/\\s+/g, ' ').trim(),\r\n                        director: director.replace(/\\s+/g, ' ').trim(),\r\n                    },\r\n                }\r\n                dispatch(getMarkets(body))\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleDelete = (market) => {\r\n        setDeletedMarket(market)\r\n        setModalBody('approve')\r\n        setModalVisible(true)\r\n    }\r\n\r\n    const handleDeleteMarket = () => {\r\n        dispatch(deleteMarket({id: deletedMarket._id})).then(\r\n            ({error, payload}) => {\r\n                if (!error) {\r\n                    const body = {\r\n                        currentPage,\r\n                        countPage: showByTotal,\r\n                        search: {\r\n                            name: name.replace(/\\s+/g, ' ').trim(),\r\n                            director: director.replace(/\\s+/g, ' ').trim(),\r\n                        },\r\n                    }\r\n                    setDeletedMarket(null)\r\n                    setModalVisible(false)\r\n                    setModalBody('')\r\n                    dispatch(getMarkets(body))\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const handleClickRow = (market) => {\r\n        setCurrentMarket(market)\r\n        setModalBody('filterBranch')\r\n        setModalVisible(true)\r\n    }\r\n    const handleClickSave = () => {\r\n        const body = {\r\n            currentPage,\r\n            countPage: showByTotal,\r\n            search: {\r\n                name: name.replace(/\\s+/g, ' ').trim(),\r\n                director: director.replace(/\\s+/g, ' ').trim(),\r\n            },\r\n        }\r\n        dispatch(getMarkets(body))\r\n        toggleModal()\r\n    }\r\n    const handleClickEdit = (market) => {\r\n        setEditedMarket(market)\r\n        setImage(market?.image ? market?.image : '')\r\n        setModalBody('addMarket')\r\n        setModalVisible(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const body = {\r\n            currentPage,\r\n            countPage: showByTotal,\r\n            search: {\r\n                name: name.replace(/\\s+/g, ' ').trim(),\r\n                director: director.replace(/\\s+/g, ' ').trim(),\r\n            },\r\n        }\r\n        dispatch(getMarkets(body))\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dispatch, currentPage, showByTotal])\r\n    useEffect(() => {\r\n        setData(markets)\r\n    }, [markets])\r\n    useEffect(() => {\r\n        setSearchedData(searchedMarkets)\r\n    }, [searchedMarkets])\r\n    useEffect(() => {\r\n        setFilteredDataTotal(total)\r\n    }, [total])\r\n\r\n    return (\r\n        <section>\r\n            {loadingDeleteMarket ? (\r\n                <Spinner />\r\n            ) : (\r\n                <UniversalModal\r\n                    title={\r\n                        modalBody === 'approve' &&\r\n                        t(\"O'chirilgan do'kon ma'lumotlarini tiklashning imkoni mavjud emas\")\r\n                    }\r\n                    headerText={\r\n                        modalBody === 'approve' &&\r\n                        t(\"Diqqat do'kon ma'lumotlarni o'chirishni tasdiqlaysizmi?\")\r\n                    }\r\n                    body={modalBody}\r\n                    isOpen={modalVisible}\r\n                    toggleModal={\r\n                        !editedMarket\r\n                            ? currentStep === 1\r\n                                ? toggleModal\r\n                                : () => {}\r\n                            : toggleModal\r\n                    }\r\n                    addMarket={{\r\n                        currentStep,\r\n                        bgActive,\r\n                        handleNext: !editedMarket\r\n                            ? handleAddNext\r\n                            : handleEditNext,\r\n                        handleFinish: !editedMarket\r\n                            ? handleAddFinish\r\n                            : handleEditFinish,\r\n                        image: image,\r\n                        setImage: setImage,\r\n                        editedMarket,\r\n                    }}\r\n                    product={currentMarket}\r\n                    approveFunction={\r\n                        deletedMarket ? handleDeleteMarket : handleClickSave\r\n                    }\r\n                />\r\n            )}\r\n            <div className='mainPadding'>\r\n                <BtnAddRemove\r\n                    text={\"Yangi do'kon qo`shish\"}\r\n                    add={true}\r\n                    onClick={() => {\r\n                        setModalBody('addMarket')\r\n                        setModalVisible(true)\r\n                    }}\r\n                />\r\n            </div>\r\n            <div className={'flex justify-between items-center mainPadding'}>\r\n                <h3 className={'text-blue-900 text-[xl] leading-[1.875rem]'}>\r\n                    {t('Do\\'konlar')}\r\n                </h3>\r\n                {(filteredDataTotal !== 0 || totalSearched !== 0) && (\r\n                    <Pagination\r\n                        countPage={Number(showByTotal)}\r\n                        totalDatas={totalSearched || filteredDataTotal}\r\n                        currentPage={currentPage}\r\n                        setCurrentPage={setCurrentPage}\r\n                    />\r\n                )}\r\n            </div>\r\n            <SearchForm\r\n                filterBy={['total', 'marketName', 'directorName']}\r\n                filterByMarketName={filterByMarketName}\r\n                filterByDirectorName={filterByDirectorName}\r\n                searchByDirectorName={director}\r\n                searchByMarketName={name}\r\n                filterByDirectorNameWhenPressEnter={\r\n                    filterByMarketNameAndDirectorNameWhenPressEnter\r\n                }\r\n                filterByMarketNameWhenPressEnter={\r\n                    filterByMarketNameAndDirectorNameWhenPressEnter\r\n                }\r\n                filterByTotal={filterByTotal}\r\n            />\r\n            <div className={'tableContainerPadding'}>\r\n                {loadingGetMarkets ? (\r\n                    <Spinner />\r\n                ) : data.length === 0 && searchedData.length === 0 ? (\r\n                    <NotFind text={\"Do'konlar mavjud emas\"} />\r\n                ) : (\r\n                    <Table\r\n                        page={'adminProduct'}\r\n                        data={searchedData.length > 0 ? searchedData : data}\r\n                        headers={headers}\r\n                        currentPage={currentPage}\r\n                        countPage={showByTotal}\r\n                        onClickTableRow={handleClickRow}\r\n                        Edit={handleClickEdit}\r\n                        handleDelete={handleDelete}\r\n                    />\r\n                )}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AdminProduct\r\n"],"names":["AdminProduct","dispatch","useDispatch","markets","total","searchedMarkets","totalSearched","loadingGetMarkets","loadingDeleteMarket","useSelector","state","adminmarkets","data","setData","useState","searchedData","setSearchedData","filteredDataTotal","setFilteredDataTotal","showByTotal","setShowByTotal","currentPage","setCurrentPage","name","setName","director","setDirector","modalVisible","setModalVisible","modalBody","setModalBody","currentStep","setCurrentStep","bgActive","setBgActive","createdMarketId","setCreatedMarketId","image","setImage","currentMarket","setCurrentMarket","editedMarket","setEditedMarket","deletedMarket","setDeletedMarket","toggleModal","setTimeout","filterByMarketNameAndDirectorNameWhenPressEnter","e","key","body","countPage","search","replace","trim","getMarketsByFilter","useEffect","getMarkets","_jsxs","children","_jsx","Spinner","UniversalModal","title","t","headerText","isOpen","addMarket","handleNext","sendingBody","market","_id","editMarket","then","_ref5","error","payload","_editedMarket$directo","createMarket","_ref2","handleFinish","editDirector","_ref4","successEditProfile","createDirector","_ref3","successAddDirectory","product","approveFunction","handleDeleteMarket","deleteMarket","id","_ref6","handleClickSave","className","BtnAddRemove","text","add","onClick","Pagination","Number","totalDatas","SearchForm","filterBy","filterByMarketName","val","target","value","valForSearch","toLowerCase","length","clearSearchedMarkets","filteredProducts","filter","includes","filterByDirectorName","firstname","lastname","searchByDirectorName","searchByMarketName","filterByDirectorNameWhenPressEnter","filterByMarketNameWhenPressEnter","filterByTotal","_ref","NotFind","Table","page","headers","styles","onClickTableRow","Edit","handleDelete"],"sourceRoot":""}