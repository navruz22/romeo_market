{"version":3,"file":"static/js/9990.5125c94c.chunk.js","mappings":"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","sources":["Pages/Packman/Packman.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport Button from '../../Components/Buttons/BtnAddRemove'\r\nimport Table from '../../Components/Table/Table'\r\nimport FieldContainer from '../../Components/FieldContainer/FieldContainer'\r\nimport Pagination from '../../Components/Pagination/Pagination'\r\nimport SearchForm from '../../Components/SearchForm/SearchForm'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport UniversalModal from '../../Components/Modal/UniversalModal'\r\nimport Spinner from '../../Components/Spinner/SmallLoader'\r\nimport NotFind from '../../Components/NotFind/NotFind'\r\nimport {motion} from 'framer-motion'\r\nimport {\r\n    successAddPackmanMessage,\r\n    successDeletePackmanMessage,\r\n    successUpdatePackmanMessage,\r\n    universalToast,\r\n    warningEmptyInput\r\n} from '../../Components/ToastMessages/ToastMessages'\r\nimport {\r\n    addPackman,\r\n    clearErrorPackmans,\r\n    clearSearchedPackmans,\r\n    clearSuccessAddPackmans,\r\n    clearSuccessDeletePackmans,\r\n    clearSuccessUpdatePackmans,\r\n    deletePackman,\r\n    getPackmans,\r\n    getPackmansByFilter,\r\n    updatePackman\r\n} from './packmanSlice'\r\nimport {checkEmptyString} from '../../App/globalFunctions.js'\r\nimport {useTranslation} from 'react-i18next'\r\nimport {filter} from 'lodash'\r\nimport TableMobile from '../../Components/Table/TableMobile.js'\r\nimport SelectForm from '../../Components/Select/SelectForm.js'\r\n\r\nfunction Packman() {\r\n    const {t} = useTranslation(['common'])\r\n    const dispatch = useDispatch()\r\n    const {\r\n        errorPackmans,\r\n        packmans,\r\n        successAddPackman,\r\n        successUpdatePackman,\r\n        successDeletePackman,\r\n        loading,\r\n        searchedPackmans,\r\n        total,\r\n        totalSearched\r\n    } = useSelector((state) => state.packmans)\r\n\r\n    const headers = [\r\n        {styles: 'w-[10%] text-start', filter: '', title: 'â„–'},\r\n        {styles: 'w-[80%] text-start', filter: '', title: t('Agentlar')},\r\n        {styles: 'w-[10%]', filter: '', title: ' '}\r\n    ]\r\n\r\n    //states\r\n    const [data, setData] = useState([])\r\n    const [searchedData, setSearchedData] = useState('')\r\n    const [packmanName, setPackmanName] = useState('')\r\n    const [currentPackman, setCurrentPackman] = useState('')\r\n    const [deletedPackman, setDeletedPackman] = useState(null)\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n    const [stickyForm, setStickyForm] = useState(false)\r\n    const [showByTotal, setShowByTotal] = useState('10')\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n    const [filteredDataTotal, setFilteredDataTotal] = useState(total)\r\n    const [searchByName, setSearchByName] = useState('')\r\n    const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setIsMobile(window.innerWidth <= 768);\r\n        };\r\n\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    }, []);\r\n    // modal toggle\r\n    const toggleModal = () => setModalVisible(!modalVisible)\r\n\r\n    // handle changed input\r\n    const handleChangePackmanName = (e) => {\r\n        setPackmanName(e.target.value)\r\n    }\r\n\r\n    // table edit and delete\r\n    const handleEditPackman = (packman) => {\r\n        setCurrentPackman(packman)\r\n        setPackmanName(packman.name)\r\n        setStickyForm(true)\r\n    }\r\n    const handleDeletePackman = (packman) => {\r\n        setDeletedPackman(packman)\r\n        toggleModal()\r\n    }\r\n\r\n    const handleClickApproveToDelete = () => {\r\n        const body = {\r\n            _id: deletedPackman._id,\r\n            currentPage,\r\n            countPage: showByTotal,\r\n            search: {\r\n                name: searchByName.replace(/\\s+/g, ' ').trim()\r\n            }\r\n        }\r\n        dispatch(deletePackman(body))\r\n        handleClickCancelToDelete()\r\n    }\r\n\r\n    const handleClickCancelToDelete = () => {\r\n        setModalVisible(false)\r\n        setDeletedPackman(null)\r\n    }\r\n\r\n    // handle change of inputs\r\n\r\n    const addNewPackman = (e) => {\r\n        e.preventDefault()\r\n        const {failed, message} = checkEmptyString([\r\n            {\r\n                value: packmanName,\r\n                message: t('Agent ismi')\r\n            }\r\n        ])\r\n        if (failed) {\r\n            warningEmptyInput(message)\r\n        } else {\r\n            const body = {\r\n                name: packmanName,\r\n                currentPage,\r\n                countPage: showByTotal,\r\n                search: {\r\n                    name: searchByName.replace(/\\s+/g, ' ').trim()\r\n                }\r\n            }\r\n            dispatch(addPackman(body))\r\n            setPackmanName('')\r\n        }\r\n    }\r\n\r\n    const handleEdit = (e) => {\r\n        e.preventDefault()\r\n        const {failed, message} = checkEmptyString([\r\n            {\r\n                value: packmanName,\r\n                message: t('Agent ismi')\r\n            }\r\n        ])\r\n        if (failed) {\r\n            warningEmptyInput(message)\r\n        } else {\r\n            const body = {\r\n                name: packmanName,\r\n                _id: currentPackman._id,\r\n                currentPage,\r\n                countPage: showByTotal,\r\n                search: {\r\n                    name: searchByName.replace(/\\s+/g, ' ').trim()\r\n                },\r\n                market: currentPackman.market\r\n            }\r\n            dispatch(updatePackman(body))\r\n        }\r\n    }\r\n\r\n    const clearForm = (e) => {\r\n        e && e.preventDefault()\r\n        setPackmanName('')\r\n        setStickyForm(false)\r\n        setDeletedPackman(null)\r\n        setCurrentPackman(null)\r\n    }\r\n\r\n    //filter by total\r\n    const filterByTotal = ({value}) => {\r\n        setShowByTotal(value)\r\n        setCurrentPage(0)\r\n    }\r\n\r\n    // handle change of search inputs\r\n    const filterByName = (e) => {\r\n        let val = e.target.value\r\n        setSearchByName(val)\r\n        let valForSearch = val.toLowerCase().replace(/\\s+/g, ' ').trim()\r\n        ;(searchedData.length > 0 || totalSearched > 0) &&\r\n        dispatch(clearSearchedPackmans())\r\n        if (valForSearch === '') {\r\n            setData(packmans)\r\n            setFilteredDataTotal(total)\r\n        } else {\r\n            const filteredPackmans = filter(packmans, (packman) => {\r\n                return packman.name.toLowerCase().includes(valForSearch)\r\n            })\r\n            setData(filteredPackmans)\r\n            setFilteredDataTotal(filteredPackmans.length)\r\n        }\r\n    }\r\n\r\n    const filterByNameWhenPressEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n            const body = {\r\n                currentPage,\r\n                countPage: showByTotal,\r\n                search: {\r\n                    name: searchByName.replace(/\\s+/g, ' ').trim()\r\n                }\r\n            }\r\n            dispatch(getPackmansByFilter(body))\r\n        }\r\n    }\r\n\r\n    // useEffects\r\n    useEffect(() => {\r\n        if (errorPackmans) {\r\n            universalToast(errorPackmans, 'error')\r\n            dispatch(clearErrorPackmans())\r\n        }\r\n        if (successAddPackman) {\r\n            successAddPackmanMessage()\r\n            dispatch(clearSuccessAddPackmans())\r\n            clearForm()\r\n        }\r\n        if (successUpdatePackman) {\r\n            successUpdatePackmanMessage()\r\n            dispatch(clearSuccessUpdatePackmans())\r\n            setCurrentPackman('')\r\n            setStickyForm(false)\r\n            clearForm()\r\n        }\r\n        if (successDeletePackman) {\r\n            successDeletePackmanMessage()\r\n            dispatch(clearSuccessDeletePackmans())\r\n            clearForm()\r\n        }\r\n    }, [\r\n        dispatch,\r\n        errorPackmans,\r\n        successAddPackman,\r\n        successUpdatePackman,\r\n        successDeletePackman\r\n    ])\r\n\r\n    useEffect(() => {\r\n        const body = {\r\n            currentPage,\r\n            countPage: showByTotal,\r\n            search: {\r\n                name: searchByName.replace(/\\s+/g, ' ').trim()\r\n            }\r\n        }\r\n        dispatch(getPackmans(body))\r\n        //    eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dispatch, showByTotal, currentPage])\r\n\r\n    useEffect(() => {\r\n        setData(packmans)\r\n    }, [packmans])\r\n\r\n    useEffect(() => {\r\n        setFilteredDataTotal(total)\r\n    }, [total])\r\n\r\n    useEffect(() => {\r\n        setSearchedData(searchedPackmans)\r\n    }, [searchedPackmans])\r\n\r\n    return (\r\n        <motion.section\r\n            key='content'\r\n            initial='collapsed'\r\n            animate='open'\r\n            exit='collapsed'\r\n            variants={{\r\n                open: {opacity: 1, height: 'auto'},\r\n                collapsed: {opacity: 0, height: 0}\r\n            }}\r\n            transition={{duration: 0.8, ease: [0.04, 0.62, 0.23, 0.98]}}\r\n        >\r\n            <UniversalModal\r\n                headerText={`${deletedPackman && deletedPackman.name\r\n                } ${t('ismli agentni o\\'chirishni tasdiqlaysizmi?')}`}\r\n                title={t('O\\'chirilgan agentni tiklashning imkoni mavjud emas!')}\r\n                toggleModal={toggleModal}\r\n                body={'approve'}\r\n                approveFunction={handleClickApproveToDelete}\r\n                closeModal={handleClickCancelToDelete}\r\n                isOpen={modalVisible}\r\n            />\r\n            <form className={`sale-deliver-form ps-[20px] mt-[40px] flex lg:flex-nowrap flex-wrap ${stickyForm && 'stickyForm'}`}>\r\n                <FieldContainer\r\n                    onChange={handleChangePackmanName}\r\n                    value={packmanName}\r\n                    label={t('Agentning ismi')}\r\n                    placeholder={t('misol: Anvar')}\r\n                    maxWidth={'w-[43.75rem]'}\r\n                    type={'string'}\r\n                />\r\n                <div className={'flex gap-[1.25rem] grow items-end'}>\r\n                    <Button\r\n                        add={!stickyForm}\r\n                        edit={stickyForm}\r\n                        text={stickyForm ? t(`Saqlash`) : t('Yangi agent qo`shish')}\r\n                        onClick={stickyForm ? handleEdit : addNewPackman}\r\n                    />\r\n                    <Button text={t('Tozalash')} onClick={clearForm} />\r\n                </div>\r\n            </form>\r\n            \r\n            <div className='flex ps-[10px] items-center '>\r\n            <SelectForm  key={'total_1'}  onSelect={filterByTotal}/>\r\n            <SearchForm\r\n                filterBy={['total', 'name']}\r\n                filterByTotal={filterByTotal}\r\n                filterByName={filterByName}\r\n                searchByName={searchByName}\r\n                filterByCodeAndNameAndCategoryWhenPressEnter={\r\n                    filterByNameWhenPressEnter\r\n                }\r\n            />\r\n            </div>\r\n\r\n            <div className='lg:tableContainerPadding'>\r\n                {loading ? (\r\n                    <Spinner />\r\n                ) : data.length === 0 ? (\r\n                    <NotFind text={'Agentlar mavjud emas'} />\r\n                ) : (\r\n                    !isMobile?\r\n                    <Table\r\n                        page='packman'\r\n                        currentPage={currentPage}\r\n                        countPage={showByTotal}\r\n                        data={searchedData.length > 0 ? searchedData : data}\r\n                        headers={headers}\r\n                        Delete={handleDeletePackman}\r\n                        Edit={handleEditPackman}\r\n                    />\r\n                    :\r\n                    <TableMobile\r\n                        page='packman'\r\n                        currentPage={currentPage}\r\n                        countPage={showByTotal}\r\n                        data={searchedData.length > 0 ? searchedData : data}\r\n                        headers={headers}\r\n                        Delete={handleDeletePackman}\r\n                        Edit={handleEditPackman}\r\n                    />\r\n                )}\r\n            </div>\r\n            <div className='flex justify-center mt-[30px] mb-[30px]'>\r\n                    {(filteredDataTotal !== 0 || totalSearched !== 0) && (\r\n                        <Pagination\r\n                            countPage={Number(showByTotal)}\r\n                            totalDatas={totalSearched || filteredDataTotal}\r\n                            setCurrentPage={setCurrentPage}\r\n                            currentPage={currentPage}\r\n                        />\r\n                    )}\r\n                </div>\r\n        </motion.section>\r\n    )\r\n}\r\n\r\nexport default Packman\r\n"],"names":["t","useTranslation","dispatch","useDispatch","errorPackmans","packmans","successAddPackman","successUpdatePackman","successDeletePackman","loading","searchedPackmans","total","totalSearched","useSelector","state","headers","styles","filter","title","data","setData","useState","searchedData","setSearchedData","packmanName","setPackmanName","currentPackman","setCurrentPackman","deletedPackman","setDeletedPackman","modalVisible","setModalVisible","stickyForm","setStickyForm","showByTotal","setShowByTotal","currentPage","setCurrentPage","filteredDataTotal","setFilteredDataTotal","searchByName","setSearchByName","isMobile","setIsMobile","window","innerWidth","useEffect","handleResize","addEventListener","removeEventListener","toggleModal","handleEditPackman","packman","name","handleDeletePackman","handleClickCancelToDelete","clearForm","e","preventDefault","filterByTotal","_ref","value","universalToast","clearErrorPackmans","successAddPackmanMessage","clearSuccessAddPackmans","successUpdatePackmanMessage","clearSuccessUpdatePackmans","successDeletePackmanMessage","clearSuccessDeletePackmans","body","countPage","search","replace","trim","getPackmans","_jsxs","motion","section","initial","animate","exit","variants","open","opacity","height","collapsed","transition","duration","ease","children","_jsx","UniversalModal","headerText","approveFunction","handleClickApproveToDelete","_id","deletePackman","closeModal","isOpen","className","FieldContainer","onChange","target","label","placeholder","maxWidth","type","Button","add","edit","text","onClick","failed","message","checkEmptyString","warningEmptyInput","market","updatePackman","addPackman","SelectForm","onSelect","SearchForm","filterBy","filterByName","val","valForSearch","toLowerCase","length","clearSearchedPackmans","filteredPackmans","includes","filterByCodeAndNameAndCategoryWhenPressEnter","key","getPackmansByFilter","Spinner","NotFind","TableMobile","page","Delete","Edit","Table","Pagination","Number","totalDatas"],"sourceRoot":""}