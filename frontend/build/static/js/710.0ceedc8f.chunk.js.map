{"version":3,"file":"static/js/710.0ceedc8f.chunk.js","mappings":"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","sources":["Pages/Currency/Currency.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport FieldContainer from '../../Components/FieldContainer/FieldContainer.js'\r\nimport Button from '../../Components/Buttons/BtnAddRemove.js'\r\nimport Table from '../../Components/Table/Table.js'\r\nimport TableMobile from '../../Components/Table/TableMobile.js'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {motion} from 'framer-motion'\r\nimport {addExchangerate, deleteExchangerate, getCurrencies, updateExchangerate} from './currencySlice.js'\r\nimport UniversalModal from '../../Components/Modal/UniversalModal.js'\r\nimport Spinner from '../../Components/Spinner/SmallLoader.js'\r\nimport SmallLoader from '../../Components/Spinner/SmallLoader.js'\r\nimport NotFind from '../../Components/NotFind/NotFind.js'\r\nimport {checkEmptyString} from '../../App/globalFunctions.js'\r\nimport {universalToast} from '../../Components/ToastMessages/ToastMessages.js'\r\nimport {useTranslation} from 'react-i18next'\r\nimport Checkbox from '../../Components/Checkbox/Checkbox.js'\r\n\r\nconst Currency = () => {\r\n    const { t } = useTranslation(['common'])\r\n    const dispatch = useDispatch()\r\n    const { currencies, getCurrenciesLoading } = useSelector(\r\n        (state) => state.currency\r\n    )\r\n\r\n    const headers = [\r\n        { title: 'â„–', styles: 'w-[8%] text-left' },\r\n        { title: t('Sana'), styles: 'w-[17%] text-center' },\r\n        { title: t('Kurs'), styles: 'w-[67%] text-center' },\r\n        { title: '', styles: 'w-[8%] text-center' },\r\n    ]\r\n\r\n    const [data, setData] = useState(currencies)\r\n    const [exchangeName, setExchangeName] = useState('')\r\n    const [currentExchange, setCurrentExchange] = useState('')\r\n    const [deletedExchange, setDeletedExchange] = useState(null)\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n    const [stickyForm, setStickyForm] = useState(false)\r\n    const [newExchange, setNewExchange] = useState(false)\r\n    const [modalBody, setModalBody] = useState(null)\r\n\r\n    const [isIncomingPrice, setIsIncomingPrice] = useState(false)\r\n    const [isSellingPrice, setIsSellingPrice] = useState(false)\r\n\r\n    const toggleModal = () => setModalVisible(!modalVisible)\r\n\r\n    const handleChangeExchangeName = (e) => {\r\n        setExchangeName(e.target.value)\r\n    }\r\n\r\n    const handleEditExchange = (exchangerate) => {\r\n        setCurrentExchange(exchangerate)\r\n        setExchangeName(exchangerate.exchangerate)\r\n        setStickyForm(true)\r\n    }\r\n    const handleDeleteExchange = (exchangerate) => {\r\n        setDeletedExchange(exchangerate)\r\n        setModalBody('approve')\r\n        toggleModal()\r\n    }\r\n    const handleClickApproveToDelete = () => {\r\n        const body = { _id: deletedExchange._id }\r\n        dispatch(deleteExchangerate(body))\r\n        handleClickCancelToDelete()\r\n    }\r\n    const handleClickCancelToDelete = () => {\r\n        setModalVisible(false)\r\n        setDeletedExchange(null)\r\n        setModalBody(null)\r\n    }\r\n\r\n    const addNewExchange = (e) => {\r\n        e.preventDefault()\r\n\r\n        const body = { exchangerate: exchangeName, isIncomingPrice, isSellingPrice }\r\n        const { failed } = checkEmptyString([\r\n            { value: exchangeName, message: 'Kurs narxi' },\r\n        ])\r\n        if (failed) {\r\n            return universalToast(t('Valyuta kursini kiriting!'), 'error')\r\n        }\r\n        if (isIncomingPrice || isSellingPrice) {\r\n            setNewExchange(true)\r\n            setModalVisible(true)\r\n            setModalBody('complete')\r\n        } else {\r\n            return universalToast(t('Sotish yoki kelish tanlang!'), 'warning')\r\n        }\r\n    }\r\n\r\n    const handleEdit = (e) => {\r\n        e.preventDefault()\r\n        const { failed } = checkEmptyString([\r\n            { value: exchangeName, message: 'Kurs narxi' },\r\n        ])\r\n        if (failed) {\r\n            return universalToast(t('Valyuta kursini kiriting!'), 'error')\r\n        }\r\n        const body = {\r\n            exchangerate: exchangeName,\r\n            _id: currentExchange._id,\r\n        }\r\n        dispatch(updateExchangerate(body)).then(({ error }) => {\r\n            if (!error) {\r\n                clearForm()\r\n                setNewExchange(true)\r\n                setModalVisible(true)\r\n                setModalBody('complete')\r\n            }\r\n        })\r\n    }\r\n\r\n    const updateAllProducts = () => {\r\n        const body = { exchangerate: exchangeName, isIncomingPrice, isSellingPrice }\r\n        dispatch(addExchangerate(body)).then(({ error }) => {\r\n            if (!error) {\r\n                clearForm()\r\n                setNewExchange(false)\r\n                setModalVisible(false)\r\n                setModalBody(null)\r\n            }\r\n        })\r\n    }\r\n    const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setIsMobile(window.innerWidth <= 768);\r\n        };\r\n\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    }, []);\r\n    const clearForm = (e) => {\r\n        e && e.preventDefault()\r\n        setExchangeName('')\r\n        setIsIncomingPrice(false)\r\n        setIsSellingPrice(false)\r\n        setCurrentExchange(null)\r\n        setStickyForm(false)\r\n    }\r\n\r\n    const handleKeyUp = (e) => {\r\n        e.preventDefault()\r\n        if (e.key === 'Enter') {\r\n            addNewExchange()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getCurrencies())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        setData(currencies)\r\n    }, [currencies])\r\n\r\n    return (\r\n        <motion.section\r\n            key='content'\r\n            initial='collapsed'\r\n            animate='open'\r\n            exit='collapsed'\r\n            variants={{\r\n                open: { opacity: 1, height: 'auto' },\r\n                collapsed: { opacity: 0, height: 0 },\r\n            }}\r\n            transition={{ duration: 0.8, ease: [0.04, 0.62, 0.23, 0.98] }}\r\n        >\r\n            {getCurrenciesLoading && (\r\n                <div className='fixed backdrop-blur-[2px] z-[100] left-0 top-0 right-0 bottom-0 bg-white-700 flex flex-col items-center justify-center w-full h-full'>\r\n                    <SmallLoader />\r\n                </div>\r\n            )}\r\n            <UniversalModal\r\n                headerText={\r\n                    newExchange\r\n                        ? `${t(\"Diqqat! Barcha mahsulotlar narxi valyuta kursiga nisbatan o'zgarishini xohlaysizmi?\")}`\r\n                        : `${deletedExchange && deletedExchange.exchangerate\r\n                        } ${t(\"kurs narxini o'chirishni tasdiqlaysizmi?\")}`\r\n                }\r\n                title={\r\n                    newExchange\r\n                        ? ''\r\n                        : t(\r\n                            \"O'chirilgan kurs narxini tiklashning imkoni mavjud emas!\"\r\n                        )\r\n                }\r\n                toggleModal={toggleModal}\r\n                body={modalBody}\r\n                approveFunction={\r\n                    newExchange ? updateAllProducts : handleClickApproveToDelete\r\n                }\r\n                closeModal={handleClickCancelToDelete}\r\n                isOpen={modalVisible}\r\n            />\r\n            <form\r\n                className={`unitFormStyle mt-[50px] ${stickyForm && 'stickyForm'\r\n                    } flex gap-[1.25rem] bg-background flex-col mainPadding transition ps-[20px] ease-linear duration-200`}\r\n            >\r\n                <div className='exchangerate-style flex lg:flex-nowrap flex-wrap'>\r\n                    <FieldContainer\r\n                        value={exchangeName}\r\n                        onChange={handleChangeExchangeName}\r\n                        label={t('Kurs narxi')}\r\n                        placeholder={\"11 000 UZS\"}\r\n                        maxWidth={'w-[30.75rem]'}\r\n                        type={'number'}\r\n                        border={true}\r\n                        onKeyPress={handleKeyUp}\r\n                    />\r\n                    <Checkbox\r\n                        id={'isIncomingPrice'}\r\n                        onChange={() => setIsIncomingPrice(!isIncomingPrice)}\r\n                        value={isIncomingPrice}\r\n                        label={t('Kelish narxi')}\r\n                    />\r\n                    <Checkbox\r\n                        id={'isSellingPrice'}\r\n                        onChange={() => setIsSellingPrice(!isSellingPrice)}\r\n                        value={isSellingPrice}\r\n                        label={t('Sotish narxi')}\r\n                    />\r\n                    <div\r\n                        className={'w-full flex gap-[1.25rem] grow w-[33.2rem]'}\r\n                    >\r\n                        <Button\r\n                            onClick={stickyForm ? handleEdit : addNewExchange}\r\n                            add={!stickyForm}\r\n                            edit={stickyForm}\r\n                            text={\r\n                                stickyForm\r\n                                    ? t(`Saqlash`)\r\n                                    : t(`Yangi o'lchov qo'shish`)\r\n                            }\r\n                        />\r\n                        <Button onClick={clearForm} text={t('Tozalash')} />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n            <div className='lg:tableContainerPadding'>\r\n                {getCurrenciesLoading ? (\r\n                    <Spinner />\r\n                ) : currencies.length === 0 ? (\r\n                    <NotFind text={t('Valyuta kursi mavjud emas')} />\r\n                ) : (\r\n                    !isMobile?\r\n                    <Table\r\n                    page={'exchange'}\r\n                    data={data}\r\n                    currentPage={0}\r\n                    countPage={10}\r\n                    headers={headers}\r\n                    Edit={handleEditExchange}\r\n                    Delete={handleDeleteExchange}\r\n                />:\r\n                <TableMobile\r\n                page={'exchange'}\r\n                data={data}\r\n                currentPage={0}\r\n                countPage={10}\r\n                headers={headers}\r\n                Edit={handleEditExchange}\r\n                Delete={handleDeleteExchange}\r\n            />\r\n                )}\r\n            </div>\r\n        </motion.section>\r\n    )\r\n}\r\n\r\nexport default Currency\r\n"],"names":["Currency","t","useTranslation","dispatch","useDispatch","currencies","getCurrenciesLoading","useSelector","state","currency","headers","title","styles","data","setData","useState","exchangeName","setExchangeName","currentExchange","setCurrentExchange","deletedExchange","setDeletedExchange","modalVisible","setModalVisible","stickyForm","setStickyForm","newExchange","setNewExchange","modalBody","setModalBody","isIncomingPrice","setIsIncomingPrice","isSellingPrice","setIsSellingPrice","toggleModal","handleEditExchange","exchangerate","handleDeleteExchange","handleClickCancelToDelete","addNewExchange","e","preventDefault","failed","checkEmptyString","value","message","universalToast","isMobile","setIsMobile","window","innerWidth","useEffect","handleResize","addEventListener","removeEventListener","clearForm","getCurrencies","_jsxs","motion","section","initial","animate","exit","variants","open","opacity","height","collapsed","transition","duration","ease","children","_jsx","className","SmallLoader","UniversalModal","headerText","body","approveFunction","updateAllProducts","addExchangerate","then","_ref2","error","handleClickApproveToDelete","_id","deleteExchangerate","closeModal","isOpen","FieldContainer","onChange","target","label","placeholder","maxWidth","type","border","onKeyPress","key","Checkbox","id","Button","onClick","updateExchangerate","_ref","add","edit","text","Spinner","length","NotFind","TableMobile","page","currentPage","countPage","Edit","Delete","Table"],"sourceRoot":""}