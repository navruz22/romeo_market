{"version":3,"file":"static/js/3562.23913078.chunk.js","mappings":"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","sources":["Pages/Inventory/Inventory.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport Table from '../../Components/Table/Table'\r\nimport Pagination from '../../Components/Pagination/Pagination'\r\nimport SearchForm from '../../Components/SearchForm/SearchForm.js'\r\nimport {motion} from 'framer-motion'\r\nimport {\r\n    clearCompleteSuccessInventory,\r\n    clearErrorInventories,\r\n    clearSearchedInventories,\r\n    clearSuccessUpdateInventory,\r\n    complateInventory,\r\n    getInventories,\r\n    getInventoriesByFilter,\r\n    updateInventory\r\n} from './inventorySlice'\r\nimport {universalSort} from '../../App/globalFunctions.js'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    successCompleteInventoryMessage,\r\n    successUpdateInventoryMessage,\r\n    universalToast\r\n} from '../../Components/ToastMessages/ToastMessages.js'\r\nimport Spinner from '../../Components/Spinner/SmallLoader.js'\r\nimport NotFind from '../../Components/NotFind/NotFind.js'\r\nimport UniversalModal from '../../Components/Modal/UniversalModal.js'\r\nimport {useNavigate} from 'react-router-dom'\r\nimport {useTranslation} from 'react-i18next'\r\nimport {filter} from 'lodash'\r\n\r\nfunction Inventory() {\r\n    const { t } = useTranslation(['common'])\r\n    const headers = [\r\n        { styles: 'w-[10%]', filter: '', title: 'â„–' },\r\n        { styles: 'w-[10%]', filter: 'category.code', title: t('Kategoriyasi') },\r\n        { styles: 'w-[10%]', filter: 'productdata.code', title: t('Kodi') },\r\n        { styles: 'w-[20%]', filter: 'productdata.name', title: t('Nomi') },\r\n        { styles: 'w-[10%] text-center', title: t('Dastlabki') },\r\n        { styles: 'w-[10%] text-center', filter: '', title: t('Sanoq') },\r\n        { styles: 'w-[10%] text-center', filter: '', title: t('Farq') },\r\n        { styles: '', filter: '', title: t('Izoh') },\r\n        { styles: '', filter: '', title: ' ' }\r\n    ]\r\n\r\n    const dispatch = useDispatch()\r\n    const {\r\n        inventories,\r\n        total,\r\n        searchedInventories,\r\n        totalSearched,\r\n        errorInventories,\r\n        loading,\r\n        successUpdateInventory,\r\n        successComplateInventory\r\n    } = useSelector((state) => state.inventories)\r\n    const navigate = useNavigate()\r\n    const [data, setData] = useState(inventories)\r\n    const [searchedData, setSearchedData] = useState(searchedInventories)\r\n    const [searchByCategory, setSearchByCategory] = useState('')\r\n    const [filteredDataTotal, setFilteredDataTotal] = useState(total)\r\n    const [showByTotal, setShowByTotal] = useState('10')\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n    const [searchByCode, setSearchByCode] = useState('')\r\n    const [searchByName, setSearchByName] = useState('')\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n    const [sorItem, setSorItem] = useState({\r\n        filter: '',\r\n        sort: '',\r\n        count: 0\r\n    })\r\n\r\n    // modal toggle\r\n    const toggleModal = () => setModalVisible(!modalVisible)\r\n\r\n    // handle change of search inputs\r\n    const filterByCategory = (e) => {\r\n        let val = e.target.value\r\n        let valForSearch = val.replace(/\\s+/g, ' ').trim()\r\n        setSearchByCategory(val)\r\n            ; (searchedData.length > 0 || totalSearched > 0) &&\r\n                dispatch(clearSearchedInventories())\r\n        if (valForSearch === '') {\r\n            setData(inventories)\r\n            setFilteredDataTotal(total)\r\n        } else {\r\n            const filteredInventories = filter(inventories,(inventory) => {\r\n                return inventory.category.code.includes(valForSearch)\r\n            })\r\n            setData(filteredInventories)\r\n            setFilteredDataTotal(filteredInventories.length)\r\n        }\r\n    }\r\n    const filterByCode = (e) => {\r\n        let val = e.target.value\r\n        let valForSearch = val.replace(/\\s+/g, ' ').trim()\r\n        setSearchByCode(val)\r\n            ; (searchedData.length > 0 || totalSearched > 0) &&\r\n                dispatch(clearSearchedInventories())\r\n        if (valForSearch === '') {\r\n            setData(inventories)\r\n            setFilteredDataTotal(total)\r\n        } else {\r\n            const filteredInventories = filter(inventories,(inventory) => {\r\n                return inventory.productdata.code.includes(valForSearch)\r\n            })\r\n            setData(filteredInventories)\r\n            setFilteredDataTotal(filteredInventories.length)\r\n        }\r\n    }\r\n    const filterByName = (e) => {\r\n        let val = e.target.value\r\n        let valForSearch = val.toLowerCase().replace(/\\s+/g, ' ').trim()\r\n        setSearchByName(val)\r\n            ; (searchedData.length > 0 || totalSearched > 0) &&\r\n                dispatch(clearSearchedInventories())\r\n        if (valForSearch === '') {\r\n            setData(inventories)\r\n            setFilteredDataTotal(total)\r\n        } else {\r\n            const filteredInventories = filter(inventories,(inventory) => {\r\n                return inventory.productdata.name\r\n                    .toLowerCase()\r\n                    .includes(valForSearch)\r\n            })\r\n            setData(filteredInventories)\r\n            setFilteredDataTotal(filteredInventories.length)\r\n        }\r\n    }\r\n\r\n    // filter by total\r\n    const filterByTotal = ({ value }) => {\r\n        setShowByTotal(value)\r\n        setCurrentPage(0)\r\n    }\r\n    const filterData = (filterKey) => {\r\n        if (filterKey === sorItem.filter) {\r\n            switch (sorItem.count) {\r\n                case 1:\r\n                    setSorItem({\r\n                        filter: filterKey,\r\n                        sort: '1',\r\n                        count: 2\r\n                    })\r\n                    universalSort(\r\n                        searchedData.length > 0 ? searchedData : data,\r\n                        searchedData.length > 0 ? setSearchedData : setData,\r\n                        filterKey,\r\n                        1,\r\n                        searchedData.length > 0\r\n                            ? searchedInventories\r\n                            : inventories\r\n                    )\r\n                    break\r\n                case 2:\r\n                    setSorItem({\r\n                        filter: filterKey,\r\n                        sort: '',\r\n                        count: 0\r\n                    })\r\n                    universalSort(\r\n                        searchedData.length > 0 ? searchedData : data,\r\n                        searchedData.length > 0 ? setSearchedData : setData,\r\n                        filterKey,\r\n                        '',\r\n                        searchedData.length > 0\r\n                            ? searchedInventories\r\n                            : inventories\r\n                    )\r\n                    break\r\n                default:\r\n                    setSorItem({\r\n                        filter: filterKey,\r\n                        sort: '-1',\r\n                        count: 1\r\n                    })\r\n                    universalSort(\r\n                        searchedData.length > 0 ? searchedData : data,\r\n                        searchedData.length > 0 ? setSearchedData : setData,\r\n                        filterKey,\r\n                        -1,\r\n                        searchedData.length > 0\r\n                            ? searchedInventories\r\n                            : inventories\r\n                    )\r\n            }\r\n        } else {\r\n            setSorItem({\r\n                filter: filterKey,\r\n                sort: '-1',\r\n                count: 1\r\n            })\r\n            universalSort(\r\n                searchedData.length > 0 ? searchedData : data,\r\n                searchedData.length > 0 ? setSearchedData : setData,\r\n                filterKey,\r\n                -1,\r\n                searchedData ? searchedInventories : inventories,\r\n                searchedData.length > 0\r\n            )\r\n        }\r\n    }\r\n    const filterByCodeAndNameAndCategoryWhenPressEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n            setCurrentPage(0)\r\n            const body = {\r\n                currentPage: 0,\r\n                countPage: showByTotal,\r\n                search: {\r\n                    name: searchByName.replace(/\\s+/g, ' ').trim(),\r\n                    code: searchByCode.replace(/\\s+/g, ' ').trim(),\r\n                    category: searchByCategory.replace(/\\s+/g, ' ').trim()\r\n                }\r\n            }\r\n            dispatch(getInventoriesByFilter(body))\r\n        }\r\n    }\r\n    const changeOfInventoryCount = (e, index, product, type) => {\r\n        let currentInventories = searchedData.length\r\n            ? [...searchedData]\r\n            : [...data]\r\n        const val = e.target.value\r\n        let inventory = {\r\n            ...currentInventories[index]\r\n        }\r\n        if (type === 'count') {\r\n            inventory.inventory = {\r\n                ...inventory.inventory,\r\n                inventorycount: parseInt(val),\r\n                productcount: product.total\r\n            }\r\n        } else {\r\n            inventory.inventory = {\r\n                ...inventory.inventory,\r\n                comment: val\r\n            }\r\n        }\r\n        currentInventories[index] = { ...inventory }\r\n        searchedData.length\r\n            ? setSearchedData([...currentInventories])\r\n            : setData([...currentInventories])\r\n    }\r\n    const saveInventory = (index) => {\r\n        const body = {\r\n            inventory: searchedData.length\r\n                ? { ...searchedData[index].inventory }\r\n                : { ...data[index].inventory },\r\n            currentPage: 0,\r\n            countPage: showByTotal,\r\n            search: {\r\n                name: searchByName.replace(/\\s+/g, ' ').trim(),\r\n                code: searchByCode.replace(/\\s+/g, ' ').trim(),\r\n                category: searchByCategory.replace(/\\s+/g, ' ').trim()\r\n            }\r\n        }\r\n        dispatch(updateInventory(body))\r\n    }\r\n    const saveOnEnter = (e, index) => {\r\n        if (e.key === 'Enter') saveInventory(index)\r\n    }\r\n    const approveCompleteInventory = () => {\r\n        dispatch(complateInventory())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (errorInventories) {\r\n            universalToast(errorInventories, 'error')\r\n            dispatch(clearErrorInventories())\r\n        }\r\n        if (successUpdateInventory) {\r\n            successUpdateInventoryMessage()\r\n            dispatch(clearSuccessUpdateInventory())\r\n        }\r\n        if (successComplateInventory) {\r\n            successCompleteInventoryMessage()\r\n            dispatch(clearCompleteSuccessInventory())\r\n            navigate('/maxsulotlar/inventarizatsiya/inventarizatsiyalar')\r\n        }\r\n    }, [\r\n        errorInventories,\r\n        dispatch,\r\n        successUpdateInventory,\r\n        successComplateInventory,\r\n        navigate\r\n    ])\r\n    useEffect(() => {\r\n        const body = {\r\n            currentPage,\r\n            countPage: showByTotal,\r\n            search: {\r\n                name: searchByName.replace(/\\s+/g, ' ').trim(),\r\n                code: searchByCode.replace(/\\s+/g, ' ').trim(),\r\n                category: searchByCategory.replace(/\\s+/g, ' ').trim()\r\n            }\r\n        }\r\n        dispatch(getInventories(body))\r\n        //    eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [currentPage, showByTotal, dispatch])\r\n    useEffect(() => {\r\n        setData(inventories)\r\n    }, [inventories])\r\n    useEffect(() => {\r\n        setFilteredDataTotal(total)\r\n    }, [total])\r\n    useEffect(() => {\r\n        setSearchedData(searchedInventories)\r\n    }, [searchedInventories])\r\n\r\n    return (\r\n        <motion.section\r\n            key='content'\r\n            initial='collapsed'\r\n            animate='open'\r\n            exit='collapsed'\r\n            variants={{\r\n                open: { opacity: 1, height: 'auto' },\r\n                collapsed: { opacity: 0, height: 0 }\r\n            }}\r\n            transition={{ duration: 0.8, ease: [0.04, 0.62, 0.23, 0.98] }}>\r\n            <UniversalModal\r\n                body='complete'\r\n                toggleModal={toggleModal}\r\n                closeModal={toggleModal}\r\n                isOpen={modalVisible}\r\n                headerText={\r\n                    t('Diqqat! Inventarizatsiya yakunlanishini tasdiqlaysizmi?')\r\n                }\r\n                approveFunction={approveCompleteInventory}\r\n            />\r\n            <div className='inverterizationHead mainPadding'>\r\n                <div className='inverterizationText'>{t(\"Inventarizatsiya\")}</div>\r\n                <div>\r\n                    {(filteredDataTotal !== 0 || totalSearched !== 0) && (\r\n                        <Pagination\r\n                            countPage={Number(showByTotal)}\r\n                            totalDatas={totalSearched || filteredDataTotal}\r\n                            currentPage={currentPage}\r\n                            setCurrentPage={setCurrentPage}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <SearchForm\r\n                filterBy={[\"total\", 'category', 'code', 'name', 'confirmBtn']}\r\n                searchByCategory={searchByCategory}\r\n                filterByCategory={filterByCategory}\r\n                filterByCode={filterByCode}\r\n                filterByName={filterByName}\r\n                searchByCode={searchByCode}\r\n                searchByName={searchByName}\r\n                filterByTotal={filterByTotal}\r\n                filterByCodeAndNameAndCategoryWhenPressEnter={\r\n                    filterByCodeAndNameAndCategoryWhenPressEnter\r\n                }\r\n                clickConfirmBtn={toggleModal}\r\n            />\r\n\r\n            <div className='tableContainerPadding'>\r\n                {loading ? (\r\n                    <Spinner />\r\n                ) : data.length === 0 && searchedData.length === 0 ? (\r\n                    <NotFind text={'Maxsulotlar mavjud emas'} />\r\n                ) : (\r\n                    <Table\r\n                        sortItem={sorItem}\r\n                        Sort={filterData}\r\n                        page='inventory'\r\n                        currentPage={currentPage}\r\n                        countPage={showByTotal}\r\n                        data={searchedData.length > 0 ? searchedData : data}\r\n                        headers={headers}\r\n                        changeHandler={changeOfInventoryCount}\r\n                        Save={saveInventory}\r\n                        onKeyUp={saveOnEnter}\r\n                    />\r\n                )}\r\n            </div>\r\n        </motion.section>\r\n    )\r\n}\r\n\r\nexport default Inventory\r\n"],"names":["t","useTranslation","headers","styles","filter","title","dispatch","useDispatch","inventories","total","searchedInventories","totalSearched","errorInventories","loading","successUpdateInventory","successComplateInventory","useSelector","state","navigate","useNavigate","data","setData","useState","searchedData","setSearchedData","searchByCategory","setSearchByCategory","filteredDataTotal","setFilteredDataTotal","showByTotal","setShowByTotal","currentPage","setCurrentPage","searchByCode","setSearchByCode","searchByName","setSearchByName","modalVisible","setModalVisible","sorItem","setSorItem","sort","count","toggleModal","saveInventory","index","body","inventory","length","countPage","search","name","replace","trim","code","category","updateInventory","useEffect","universalToast","clearErrorInventories","successUpdateInventoryMessage","clearSuccessUpdateInventory","successCompleteInventoryMessage","clearCompleteSuccessInventory","getInventories","_jsxs","motion","section","initial","animate","exit","variants","open","opacity","height","collapsed","transition","duration","ease","children","_jsx","UniversalModal","closeModal","isOpen","headerText","approveFunction","approveCompleteInventory","complateInventory","className","Pagination","Number","totalDatas","SearchForm","filterBy","filterByCategory","e","val","target","value","valForSearch","clearSearchedInventories","filteredInventories","includes","filterByCode","productdata","filterByName","toLowerCase","filterByTotal","_ref","filterByCodeAndNameAndCategoryWhenPressEnter","key","getInventoriesByFilter","clickConfirmBtn","Spinner","NotFind","text","Table","sortItem","Sort","filterKey","universalSort","page","changeHandler","changeOfInventoryCount","product","type","currentInventories","inventorycount","parseInt","productcount","comment","Save","onKeyUp","saveOnEnter"],"sourceRoot":""}